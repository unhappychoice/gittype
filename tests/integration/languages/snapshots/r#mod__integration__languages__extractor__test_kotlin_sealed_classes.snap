---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [],
      "content": "\nsealed class Result<out T> {\n    data class Success<T>(val data: T) : Result<T>()\n    data class Error(val message: String) : Result<Nothing>()\n    object Loading : Result<Nothing>()\n}\n\nsealed interface UiState {\n    object Idle : UiState\n    data class Loading(val progress: Int) : UiState\n    data class Success(val data: String) : UiState\n    data class Error(val error: Throwable) : UiState\n}\n\nfun <T> handleResult(result: Result<T>): String {\n    return when (result) {\n        is Result.Success -> \"Success: ${result.data}\"\n        is Result.Error -> \"Error: ${result.message}\"\n        is Result.Loading -> \"Loading...\"\n    }\n}\n",
      "end_line": 21,
      "language": "kotlin",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "sealed class Result<out T> {\n    data class Success<T>(val data: T) : Result<T>()\n    data class Error(val message: String) : Result<Nothing>()\n    object Loading : Result<Nothing>()\n}",
      "end_line": 6,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 2
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "    data class Success<T>(val data: T) : Result<T>()",
      "end_line": 3,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 4,
      "start_line": 3
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "    data class Error(val message: String) : Result<Nothing>()",
      "end_line": 4,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 4,
      "start_line": 4
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "    object Loading : Result<Nothing>()",
      "end_line": 5,
      "language": "kotlin",
      "name": "object",
      "original_indentation": 4,
      "start_line": 5
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "sealed interface UiState {\n    object Idle : UiState\n    data class Loading(val progress: Int) : UiState\n    data class Success(val data: String) : UiState\n    data class Error(val error: Throwable) : UiState\n}",
      "end_line": 13,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 8
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "    object Idle : UiState",
      "end_line": 9,
      "language": "kotlin",
      "name": "object",
      "original_indentation": 4,
      "start_line": 9
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "    data class Loading(val progress: Int) : UiState",
      "end_line": 10,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 4,
      "start_line": 10
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "    data class Success(val data: String) : UiState",
      "end_line": 11,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 4,
      "start_line": 11
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "    data class Error(val error: Throwable) : UiState",
      "end_line": 12,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 4,
      "start_line": 12
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "fun <T> handleResult(result: Result<T>): String {\n    return when (result) {\n        is Result.Success -> \"Success: ${result.data}\"\n        is Result.Error -> \"Error: ${result.message}\"\n        is Result.Loading -> \"Loading...\"\n    }\n}",
      "end_line": 21,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 0,
      "start_line": 15
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "    return when (result) {\n        is Result.Success -> \"Success: ${result.data}\"\n        is Result.Error -> \"Error: ${result.message}\"\n        is Result.Loading -> \"Loading...\"\n    }",
      "end_line": 20,
      "language": "kotlin",
      "name": "when_block",
      "original_indentation": 11,
      "start_line": 16
    }
  ],
  "source_code": "\nsealed class Result<out T> {\n    data class Success<T>(val data: T) : Result<T>()\n    data class Error(val message: String) : Result<Nothing>()\n    object Loading : Result<Nothing>()\n}\n\nsealed interface UiState {\n    object Idle : UiState\n    data class Loading(val progress: Int) : UiState\n    data class Success(val data: String) : UiState\n    data class Error(val error: Throwable) : UiState\n}\n\nfun <T> handleResult(result: Result<T>): String {\n    return when (result) {\n        is Result.Success -> \"Success: ${result.data}\"\n        is Result.Error -> \"Error: ${result.message}\"\n        is Result.Loading -> \"Loading...\"\n    }\n}\n",
  "test_name": "test_kotlin_sealed_classes",
  "total_chunks": 12
}
