---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [
        [
          425,
          488
        ],
        [
          703,
          723
        ],
        [
          2082,
          2132
        ],
        [
          2926,
          2983
        ]
      ],
      "content": "\nimport json\nfrom typing import List, Dict, Optional\n\ndef process_json_data(file_path: str) -> Dict:\n    \"\"\"Function with error handling and complex logic\"\"\"\n    try:\n        with open(file_path, 'r') as file:\n            data = json.load(file)\n    except FileNotFoundError:\n        return {'error': 'File not found', 'data': None}\n    except json.JSONDecodeError:\n        return {'error': 'Invalid JSON', 'data': None}\n\n    # Data validation and transformation - extractable middle chunk\n    if not isinstance(data, dict):\n        return {'error': 'Expected dictionary format', 'data': None}\n\n    processed_items = []\n    for key, value in data.items():\n        if isinstance(value, list):\n            # Process list items\n            processed_list = []\n            for item in value:\n                if isinstance(item, dict) and 'id' in item:\n                    processed_item = {\n                        'id': item['id'],\n                        'processed': True,\n                        'original_keys': list(item.keys())\n                    }\n                    processed_list.append(processed_item)\n\n            processed_items.append({\n                'key': key,\n                'type': 'list',\n                'items': processed_list,\n                'count': len(processed_list)\n            })\n        elif isinstance(value, dict):\n            processed_items.append({\n                'key': key,\n                'type': 'dict',\n                'keys': list(value.keys()),\n                'count': len(value)\n            })\n\n    return {\n        'error': None,\n        'data': processed_items,\n        'total_processed': len(processed_items)\n    }\n\nclass ConfigManager:\n    def __init__(self, config_path: str):\n        self.config_path = config_path\n        self.config = {}\n        self.load_config()\n\n    def load_config(self) -> bool:\n        \"\"\"Load configuration with fallback logic\"\"\"\n        try:\n            with open(self.config_path, 'r') as file:\n                self.config = json.load(file)\n            return True\n        except Exception:\n            # Default configuration - extractable middle chunk\n            self.config = {\n                'debug': False,\n                'log_level': 'INFO',\n                'database': {\n                    'host': 'localhost',\n                    'port': 0,\n                    'name': 'default_db'\n                },\n                'cache': {\n                    'enabled': True,\n                    'ttl': 0,\n                    'max_size': 1000\n                },\n                'features': {\n                    'analytics': True,\n                    'notifications': False,\n                    'beta_features': False\n                }\n            }\n            return False\n\n    def get_setting(self, key: str, default=None):\n        \"\"\"Get setting with dot notation support\"\"\"\n        keys = key.split('.')\n        value = self.config\n\n        # Navigate through nested keys - extractable middle chunk\n        for k in keys:\n            if isinstance(value, dict) and k in value:\n                value = value[k]\n            else:\n                return default\n\n        return value\n",
      "end_line": 100,
      "language": "python",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "def process_json_data",
      "end_line": 5,
      "language": "python",
      "name": "name",
      "original_indentation": 4,
      "start_line": 5
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [
        [
          371,
          434
        ],
        [
          649,
          669
        ]
      ],
      "content": "def process_json_data(file_path: str) -> Dict:\n    \"\"\"Function with error handling and complex logic\"\"\"\n    try:\n        with open(file_path, 'r') as file:\n            data = json.load(file)\n    except FileNotFoundError:\n        return {'error': 'File not found', 'data': None}\n    except json.JSONDecodeError:\n        return {'error': 'Invalid JSON', 'data': None}\n\n    # Data validation and transformation - extractable middle chunk\n    if not isinstance(data, dict):\n        return {'error': 'Expected dictionary format', 'data': None}\n\n    processed_items = []\n    for key, value in data.items():\n        if isinstance(value, list):\n            # Process list items\n            processed_list = []\n            for item in value:\n                if isinstance(item, dict) and 'id' in item:\n                    processed_item = {\n                        'id': item['id'],\n                        'processed': True,\n                        'original_keys': list(item.keys())\n                    }\n                    processed_list.append(processed_item)\n\n            processed_items.append({\n                'key': key,\n                'type': 'list',\n                'items': processed_list,\n                'count': len(processed_list)\n            })\n        elif isinstance(value, dict):\n            processed_items.append({\n                'key': key,\n                'type': 'dict',\n                'keys': list(value.keys()),\n                'count': len(value)\n            })\n\n    return {\n        'error': None,\n        'data': processed_items,\n        'total_processed': len(processed_items)\n    }",
      "end_line": 51,
      "language": "python",
      "name": "function",
      "original_indentation": 0,
      "start_line": 5
    },
    {
      "chunk_type": "ErrorHandling",
      "comment_ranges": [],
      "content": "    try:\n        with open(file_path, 'r') as file:\n            data = json.load(file)\n    except FileNotFoundError:\n        return {'error': 'File not found', 'data': None}\n    except json.JSONDecodeError:\n        return {'error': 'Invalid JSON', 'data': None}",
      "end_line": 13,
      "language": "python",
      "name": "try_block",
      "original_indentation": 4,
      "start_line": 7
    },
    {
      "chunk_type": "SpecialBlock",
      "comment_ranges": [],
      "content": "        with open(file_path, 'r') as file:\n            data = json.load(file)",
      "end_line": 9,
      "language": "python",
      "name": "with_block",
      "original_indentation": 8,
      "start_line": 8
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "    if not isinstance(data, dict):\n        return {'error': 'Expected dictionary format', 'data': None}",
      "end_line": 17,
      "language": "python",
      "name": "if_block",
      "original_indentation": 4,
      "start_line": 16
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [],
      "content": "    for key, value in data.items():\n        if isinstance(value, list):\n            # Process list items\n            processed_list = []\n            for item in value:\n                if isinstance(item, dict) and 'id' in item:\n                    processed_item = {\n                        'id': item['id'],\n                        'processed': True,\n                        'original_keys': list(item.keys())\n                    }\n                    processed_list.append(processed_item)\n\n            processed_items.append({\n                'key': key,\n                'type': 'list',\n                'items': processed_list,\n                'count': len(processed_list)\n            })\n        elif isinstance(value, dict):\n            processed_items.append({\n                'key': key,\n                'type': 'dict',\n                'keys': list(value.keys()),\n                'count': len(value)\n            })",
      "end_line": 45,
      "language": "python",
      "name": "for_loop",
      "original_indentation": 4,
      "start_line": 20
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if isinstance(value, list):\n            # Process list items\n            processed_list = []\n            for item in value:\n                if isinstance(item, dict) and 'id' in item:\n                    processed_item = {\n                        'id': item['id'],\n                        'processed': True,\n                        'original_keys': list(item.keys())\n                    }\n                    processed_list.append(processed_item)\n\n            processed_items.append({\n                'key': key,\n                'type': 'list',\n                'items': processed_list,\n                'count': len(processed_list)\n            })\n        elif isinstance(value, dict):\n            processed_items.append({\n                'key': key,\n                'type': 'dict',\n                'keys': list(value.keys()),\n                'count': len(value)\n            })",
      "end_line": 45,
      "language": "python",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 21
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [],
      "content": "            for item in value:\n                if isinstance(item, dict) and 'id' in item:\n                    processed_item = {\n                        'id': item['id'],\n                        'processed': True,\n                        'original_keys': list(item.keys())\n                    }\n                    processed_list.append(processed_item)",
      "end_line": 31,
      "language": "python",
      "name": "for_loop",
      "original_indentation": 12,
      "start_line": 24
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "                if isinstance(item, dict) and 'id' in item:\n                    processed_item = {\n                        'id': item['id'],\n                        'processed': True,\n                        'original_keys': list(item.keys())\n                    }\n                    processed_list.append(processed_item)",
      "end_line": 31,
      "language": "python",
      "name": "if_block",
      "original_indentation": 16,
      "start_line": 25
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "            processed_items.append({\n                'key': key,\n                'type': 'list',\n                'items': processed_list,\n                'count': len(processed_list)\n            })",
      "end_line": 38,
      "language": "python",
      "name": "function_call",
      "original_indentation": 12,
      "start_line": 33
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "            processed_items.append({\n                'key': key,\n                'type': 'dict',\n                'keys': list(value.keys()),\n                'count': len(value)\n            })",
      "end_line": 45,
      "language": "python",
      "name": "function_call",
      "original_indentation": 12,
      "start_line": 40
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "class ConfigManager",
      "end_line": 53,
      "language": "python",
      "name": "name",
      "original_indentation": 6,
      "start_line": 53
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [
        [
          418,
          468
        ],
        [
          1262,
          1319
        ]
      ],
      "content": "class ConfigManager:\n    def __init__(self, config_path: str):\n        self.config_path = config_path\n        self.config = {}\n        self.load_config()\n\n    def load_config(self) -> bool:\n        \"\"\"Load configuration with fallback logic\"\"\"\n        try:\n            with open(self.config_path, 'r') as file:\n                self.config = json.load(file)\n            return True\n        except Exception:\n            # Default configuration - extractable middle chunk\n            self.config = {\n                'debug': False,\n                'log_level': 'INFO',\n                'database': {\n                    'host': 'localhost',\n                    'port': 0,\n                    'name': 'default_db'\n                },\n                'cache': {\n                    'enabled': True,\n                    'ttl': 0,\n                    'max_size': 1000\n                },\n                'features': {\n                    'analytics': True,\n                    'notifications': False,\n                    'beta_features': False\n                }\n            }\n            return False\n\n    def get_setting(self, key: str, default=None):\n        \"\"\"Get setting with dot notation support\"\"\"\n        keys = key.split('.')\n        value = self.config\n\n        # Navigate through nested keys - extractable middle chunk\n        for k in keys:\n            if isinstance(value, dict) and k in value:\n                value = value[k]\n            else:\n                return default\n\n        return value",
      "end_line": 100,
      "language": "python",
      "name": "class",
      "original_indentation": 0,
      "start_line": 53
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    def __init__(self, config_path: str):\n        self.config_path = config_path\n        self.config = {}\n        self.load_config()",
      "end_line": 57,
      "language": "python",
      "name": "function",
      "original_indentation": 4,
      "start_line": 54
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "    def load_config",
      "end_line": 59,
      "language": "python",
      "name": "name",
      "original_indentation": 8,
      "start_line": 59
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [
        [
          263,
          313
        ]
      ],
      "content": "    def load_config(self) -> bool:\n        \"\"\"Load configuration with fallback logic\"\"\"\n        try:\n            with open(self.config_path, 'r') as file:\n                self.config = json.load(file)\n            return True\n        except Exception:\n            # Default configuration - extractable middle chunk\n            self.config = {\n                'debug': False,\n                'log_level': 'INFO',\n                'database': {\n                    'host': 'localhost',\n                    'port': 0,\n                    'name': 'default_db'\n                },\n                'cache': {\n                    'enabled': True,\n                    'ttl': 0,\n                    'max_size': 1000\n                },\n                'features': {\n                    'analytics': True,\n                    'notifications': False,\n                    'beta_features': False\n                }\n            }\n            return False",
      "end_line": 86,
      "language": "python",
      "name": "function",
      "original_indentation": 4,
      "start_line": 59
    },
    {
      "chunk_type": "ErrorHandling",
      "comment_ranges": [],
      "content": "        try:\n            with open(self.config_path, 'r') as file:\n                self.config = json.load(file)\n            return True\n        except Exception:\n            # Default configuration - extractable middle chunk\n            self.config = {\n                'debug': False,\n                'log_level': 'INFO',\n                'database': {\n                    'host': 'localhost',\n                    'port': 0,\n                    'name': 'default_db'\n                },\n                'cache': {\n                    'enabled': True,\n                    'ttl': 0,\n                    'max_size': 1000\n                },\n                'features': {\n                    'analytics': True,\n                    'notifications': False,\n                    'beta_features': False\n                }\n            }\n            return False",
      "end_line": 86,
      "language": "python",
      "name": "try_block",
      "original_indentation": 8,
      "start_line": 61
    },
    {
      "chunk_type": "SpecialBlock",
      "comment_ranges": [],
      "content": "            with open(self.config_path, 'r') as file:\n                self.config = json.load(file)",
      "end_line": 63,
      "language": "python",
      "name": "with_block",
      "original_indentation": 12,
      "start_line": 62
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "    def get_setting",
      "end_line": 88,
      "language": "python",
      "name": "name",
      "original_indentation": 8,
      "start_line": 88
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [
        [
          170,
          227
        ]
      ],
      "content": "    def get_setting(self, key: str, default=None):\n        \"\"\"Get setting with dot notation support\"\"\"\n        keys = key.split('.')\n        value = self.config\n\n        # Navigate through nested keys - extractable middle chunk\n        for k in keys:\n            if isinstance(value, dict) and k in value:\n                value = value[k]\n            else:\n                return default\n\n        return value",
      "end_line": 100,
      "language": "python",
      "name": "function",
      "original_indentation": 4,
      "start_line": 88
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [],
      "content": "        for k in keys:\n            if isinstance(value, dict) and k in value:\n                value = value[k]\n            else:\n                return default",
      "end_line": 98,
      "language": "python",
      "name": "for_loop",
      "original_indentation": 8,
      "start_line": 94
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "            if isinstance(value, dict) and k in value:\n                value = value[k]\n            else:\n                return default",
      "end_line": 98,
      "language": "python",
      "name": "if_block",
      "original_indentation": 12,
      "start_line": 95
    }
  ],
  "source_code": "\nimport json\nfrom typing import List, Dict, Optional\n\ndef process_json_data(file_path: str) -> Dict:\n    \"\"\"Function with error handling and complex logic\"\"\"\n    try:\n        with open(file_path, 'r') as file:\n            data = json.load(file)\n    except FileNotFoundError:\n        return {'error': 'File not found', 'data': None}\n    except json.JSONDecodeError:\n        return {'error': 'Invalid JSON', 'data': None}\n\n    # Data validation and transformation - extractable middle chunk\n    if not isinstance(data, dict):\n        return {'error': 'Expected dictionary format', 'data': None}\n\n    processed_items = []\n    for key, value in data.items():\n        if isinstance(value, list):\n            # Process list items\n            processed_list = []\n            for item in value:\n                if isinstance(item, dict) and 'id' in item:\n                    processed_item = {\n                        'id': item['id'],\n                        'processed': True,\n                        'original_keys': list(item.keys())\n                    }\n                    processed_list.append(processed_item)\n\n            processed_items.append({\n                'key': key,\n                'type': 'list',\n                'items': processed_list,\n                'count': len(processed_list)\n            })\n        elif isinstance(value, dict):\n            processed_items.append({\n                'key': key,\n                'type': 'dict',\n                'keys': list(value.keys()),\n                'count': len(value)\n            })\n\n    return {\n        'error': None,\n        'data': processed_items,\n        'total_processed': len(processed_items)\n    }\n\nclass ConfigManager:\n    def __init__(self, config_path: str):\n        self.config_path = config_path\n        self.config = {}\n        self.load_config()\n\n    def load_config(self) -> bool:\n        \"\"\"Load configuration with fallback logic\"\"\"\n        try:\n            with open(self.config_path, 'r') as file:\n                self.config = json.load(file)\n            return True\n        except Exception:\n            # Default configuration - extractable middle chunk\n            self.config = {\n                'debug': False,\n                'log_level': 'INFO',\n                'database': {\n                    'host': 'localhost',\n                    'port': 0,\n                    'name': 'default_db'\n                },\n                'cache': {\n                    'enabled': True,\n                    'ttl': 0,\n                    'max_size': 1000\n                },\n                'features': {\n                    'analytics': True,\n                    'notifications': False,\n                    'beta_features': False\n                }\n            }\n            return False\n\n    def get_setting(self, key: str, default=None):\n        \"\"\"Get setting with dot notation support\"\"\"\n        keys = key.split('.')\n        value = self.config\n\n        # Navigate through nested keys - extractable middle chunk\n        for k in keys:\n            if isinstance(value, dict) and k in value:\n                value = value[k]\n            else:\n                return default\n\n        return value\n",
  "test_name": "test_python_combined_extraction_new",
  "total_chunks": 23
}
