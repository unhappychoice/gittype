---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "greet :: String -> String",
      "end_line": 2,
      "language": "haskell",
      "name": "greet",
      "original_indentation": 0,
      "start_line": 2
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "greet name = \"Hello, \" ++ name ++ \"!\"",
      "end_line": 3,
      "language": "haskell",
      "name": "greet",
      "original_indentation": 0,
      "start_line": 3
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "add :: Int -> Int -> Int",
      "end_line": 5,
      "language": "haskell",
      "name": "add",
      "original_indentation": 0,
      "start_line": 5
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "add x y = x + y",
      "end_line": 6,
      "language": "haskell",
      "name": "add",
      "original_indentation": 0,
      "start_line": 6
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "factorial :: Int -> Int",
      "end_line": 8,
      "language": "haskell",
      "name": "factorial",
      "original_indentation": 0,
      "start_line": 8
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "factorial 0 = 1",
      "end_line": 9,
      "language": "haskell",
      "name": "factorial",
      "original_indentation": 0,
      "start_line": 9
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "factorial n = n * factorial (n - 1)",
      "end_line": 10,
      "language": "haskell",
      "name": "factorial",
      "original_indentation": 0,
      "start_line": 10
    }
  ],
  "source_code": "\ngreet :: String -> String\ngreet name = \"Hello, \" ++ name ++ \"!\"\n\nadd :: Int -> Int -> Int\nadd x y = x + y\n\nfactorial :: Int -> Int\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)\n",
  "test_name": "test_haskell_function_extraction",
  "total_chunks": 7
}
