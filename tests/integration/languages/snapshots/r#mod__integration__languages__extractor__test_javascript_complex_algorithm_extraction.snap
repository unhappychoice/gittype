---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "Function",
      "comment_ranges": [
        [
          173,
          228
        ],
        [
          612,
          643
        ]
      ],
      "content": "function complexDataProcessor(input, options = {}) {\n    const { threshold = 10, enableCaching = true } = options;\n    const cache = new Map();\n    const results = [];\n\n    // Main processing algorithm - extractable middle chunk\n    for (let i = 0; i < input.length; i++) {\n        const item = input[i];\n        const cacheKey = `item_${i}_${item.id || i}`;\n\n        if (enableCaching && cache.has(cacheKey)) {\n            const cachedResult = cache.get(cacheKey);\n            if (cachedResult.valid) {\n                results.push(cachedResult.data);\n                continue;\n            }\n        }\n\n        // Complex transformation logic\n        let processedItem;\n        if (typeof item === 'object' && item !== null) {\n            const score = (item.value || 0) * (item.weight || 1);\n\n            if (score > threshold) {\n                processedItem = {\n                    id: item.id || i,\n                    originalValue: item.value,\n                    score: score,\n                    category: score > threshold * 2 ? 'high' : 'medium',\n                    metadata: {\n                        processed: true,\n                        timestamp: Date.now(),\n                        processor: 'complex'\n                    }\n                };\n            } else {\n                processedItem = {\n                    id: item.id || i,\n                    originalValue: item.value,\n                    score: score + threshold,\n                    category: 'low',\n                    metadata: {\n                        processed: true,\n                        timestamp: Date.now(),\n                        processor: 'simple',\n                        adjusted: true\n                    }\n                };\n            }\n        } else {\n            processedItem = {\n                id: i,\n                originalValue: item,\n                score: Number(item) || 0,\n                category: 'primitive',\n                metadata: {\n                    processed: true,\n                    timestamp: Date.now(),\n                    processor: 'primitive'\n                }\n            };\n        }\n\n        if (enableCaching) {\n            cache.set(cacheKey, { data: processedItem, valid: true });\n        }\n\n        results.push(processedItem);\n    }\n\n    return results;\n}",
      "end_line": 73,
      "language": "javascript",
      "name": "complexDataProcessor",
      "original_indentation": 0,
      "start_line": 2
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if (enableCaching && cache.has(cacheKey)) {\n            const cachedResult = cache.get(cacheKey);\n            if (cachedResult.valid) {\n                results.push(cachedResult.data);\n                continue;\n            }\n        }",
      "end_line": 18,
      "language": "javascript",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 12
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "            if (cachedResult.valid) {\n                results.push(cachedResult.data);\n                continue;\n            }",
      "end_line": 17,
      "language": "javascript",
      "name": "if_block",
      "original_indentation": 12,
      "start_line": 14
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        if (typeof item === 'object' && item !== null) {\n            const score = (item.value || 0) * (item.weight || 1);\n\n            if (score > threshold) {\n                processedItem = {\n                    id: item.id || i,\n                    originalValue: item.value,\n                    score: score,\n                    category: score > threshold * 2 ? 'high' : 'medium',\n                    metadata: {\n                        processed: true,\n                        timestamp: Date.now(),\n                        processor: 'complex'\n                    }\n                };\n            } else {\n                processedItem = {\n                    id: item.id || i,\n                    originalValue: item.value,\n                    score: score + threshold,\n                    category: 'low',\n                    metadata: {\n                        processed: true,\n                        timestamp: Date.now(),\n                        processor: 'simple',\n                        adjusted: true\n                    }\n                };\n            }\n        }",
      "end_line": 51,
      "language": "javascript",
      "name": "code_block",
      "original_indentation": 55,
      "start_line": 22
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if (typeof item === 'object' && item !== null) {\n            const score = (item.value || 0) * (item.weight || 1);\n\n            if (score > threshold) {\n                processedItem = {\n                    id: item.id || i,\n                    originalValue: item.value,\n                    score: score,\n                    category: score > threshold * 2 ? 'high' : 'medium',\n                    metadata: {\n                        processed: true,\n                        timestamp: Date.now(),\n                        processor: 'complex'\n                    }\n                };\n            } else {\n                processedItem = {\n                    id: item.id || i,\n                    originalValue: item.value,\n                    score: score + threshold,\n                    category: 'low',\n                    metadata: {\n                        processed: true,\n                        timestamp: Date.now(),\n                        processor: 'simple',\n                        adjusted: true\n                    }\n                };\n            }\n        } else {\n            processedItem = {\n                id: i,\n                originalValue: item,\n                score: Number(item) || 0,\n                category: 'primitive',\n                metadata: {\n                    processed: true,\n                    timestamp: Date.now(),\n                    processor: 'primitive'\n                }\n            };\n        }",
      "end_line": 63,
      "language": "javascript",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 22
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "            if (score > threshold) {\n                processedItem = {\n                    id: item.id || i,\n                    originalValue: item.value,\n                    score: score,\n                    category: score > threshold * 2 ? 'high' : 'medium',\n                    metadata: {\n                        processed: true,\n                        timestamp: Date.now(),\n                        processor: 'complex'\n                    }\n                };\n            }",
      "end_line": 37,
      "language": "javascript",
      "name": "code_block",
      "original_indentation": 35,
      "start_line": 25
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "            if (score > threshold) {\n                processedItem = {\n                    id: item.id || i,\n                    originalValue: item.value,\n                    score: score,\n                    category: score > threshold * 2 ? 'high' : 'medium',\n                    metadata: {\n                        processed: true,\n                        timestamp: Date.now(),\n                        processor: 'complex'\n                    }\n                };\n            } else {\n                processedItem = {\n                    id: item.id || i,\n                    originalValue: item.value,\n                    score: score + threshold,\n                    category: 'low',\n                    metadata: {\n                        processed: true,\n                        timestamp: Date.now(),\n                        processor: 'simple',\n                        adjusted: true\n                    }\n                };\n            }",
      "end_line": 50,
      "language": "javascript",
      "name": "if_block",
      "original_indentation": 12,
      "start_line": 25
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "            } else {\n                processedItem = {\n                    id: item.id || i,\n                    originalValue: item.value,\n                    score: score + threshold,\n                    category: 'low',\n                    metadata: {\n                        processed: true,\n                        timestamp: Date.now(),\n                        processor: 'simple',\n                        adjusted: true\n                    }\n                };\n            }",
      "end_line": 50,
      "language": "javascript",
      "name": "code_block",
      "original_indentation": 19,
      "start_line": 37
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        } else {\n            processedItem = {\n                id: i,\n                originalValue: item,\n                score: Number(item) || 0,\n                category: 'primitive',\n                metadata: {\n                    processed: true,\n                    timestamp: Date.now(),\n                    processor: 'primitive'\n                }\n            };\n        }",
      "end_line": 63,
      "language": "javascript",
      "name": "code_block",
      "original_indentation": 15,
      "start_line": 51
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if (enableCaching) {\n            cache.set(cacheKey, { data: processedItem, valid: true });\n        }",
      "end_line": 67,
      "language": "javascript",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 65
    },
    {
      "chunk_type": "Method",
      "comment_ranges": [
        [
          196,
          252
        ]
      ],
      "content": "    analyzePatterns(data, patternTypes = ['sequence', 'frequency']) {\n        const analysis = {\n            patterns: [],\n            statistics: {},\n            insights: []\n        };\n\n        // Pattern analysis algorithm - extractable middle chunk\n        if (patternTypes.includes('sequence')) {\n            for (let i = 1; i < data.length; i++) {\n                const current = data[i];\n                const previous = data[i - 1];\n\n                if (typeof current === 'number' && typeof previous === 'number') {\n                    const difference = current - previous;\n                    const percentChange = previous !== 0 ? (difference / previous) * 100 : 0;\n\n                    const pattern = {\n                        type: 'sequence',\n                        position: i,\n                        change: difference,\n                        percentChange: percentChange,\n                        trend: difference > 0 ? 'increasing' :\n                               difference < 0 ? 'decreasing' : 'stable',\n                        magnitude: Math.abs(percentChange) > 50 ? 'significant' : 'minor'\n                    };\n\n                    analysis.patterns.push(pattern);\n                }\n            }\n        }\n\n        if (patternTypes.includes('frequency')) {\n            const frequency = {};\n            data.forEach(item => {\n                const key = typeof item === 'object' ?\n                    JSON.stringify(item) : String(item);\n                frequency[key] = (frequency[key] || 0) + 1;\n            });\n\n            analysis.statistics.frequency = frequency;\n            analysis.statistics.mostCommon = Object.entries(frequency)\n                .sort(([,a], [,b]) => b - a)\n                .slice(0, 5);\n        }\n\n        return analysis;\n    }",
      "end_line": 123,
      "language": "javascript",
      "name": "analyzePatterns",
      "original_indentation": 4,
      "start_line": 76
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if (patternTypes.includes('sequence')) {\n            for (let i = 1; i < data.length; i++) {\n                const current = data[i];\n                const previous = data[i - 1];\n\n                if (typeof current === 'number' && typeof previous === 'number') {\n                    const difference = current - previous;\n                    const percentChange = previous !== 0 ? (difference / previous) * 100 : 0;\n\n                    const pattern = {\n                        type: 'sequence',\n                        position: i,\n                        change: difference,\n                        percentChange: percentChange,\n                        trend: difference > 0 ? 'increasing' :\n                               difference < 0 ? 'decreasing' : 'stable',\n                        magnitude: Math.abs(percentChange) > 50 ? 'significant' : 'minor'\n                    };\n\n                    analysis.patterns.push(pattern);\n                }\n            }\n        }",
      "end_line": 106,
      "language": "javascript",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 84
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [],
      "content": "            for (let i = 1; i < data.length; i++) {\n                const current = data[i];\n                const previous = data[i - 1];\n\n                if (typeof current === 'number' && typeof previous === 'number') {\n                    const difference = current - previous;\n                    const percentChange = previous !== 0 ? (difference / previous) * 100 : 0;\n\n                    const pattern = {\n                        type: 'sequence',\n                        position: i,\n                        change: difference,\n                        percentChange: percentChange,\n                        trend: difference > 0 ? 'increasing' :\n                               difference < 0 ? 'decreasing' : 'stable',\n                        magnitude: Math.abs(percentChange) > 50 ? 'significant' : 'minor'\n                    };\n\n                    analysis.patterns.push(pattern);\n                }\n            }",
      "end_line": 105,
      "language": "javascript",
      "name": "for_loop",
      "original_indentation": 12,
      "start_line": 85
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "                if (typeof current === 'number' && typeof previous === 'number') {\n                    const difference = current - previous;\n                    const percentChange = previous !== 0 ? (difference / previous) * 100 : 0;\n\n                    const pattern = {\n                        type: 'sequence',\n                        position: i,\n                        change: difference,\n                        percentChange: percentChange,\n                        trend: difference > 0 ? 'increasing' :\n                               difference < 0 ? 'decreasing' : 'stable',\n                        magnitude: Math.abs(percentChange) > 50 ? 'significant' : 'minor'\n                    };\n\n                    analysis.patterns.push(pattern);\n                }",
      "end_line": 104,
      "language": "javascript",
      "name": "if_block",
      "original_indentation": 16,
      "start_line": 89
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if (patternTypes.includes('frequency')) {\n            const frequency = {};\n            data.forEach(item => {\n                const key = typeof item === 'object' ?\n                    JSON.stringify(item) : String(item);\n                frequency[key] = (frequency[key] || 0) + 1;\n            });\n\n            analysis.statistics.frequency = frequency;\n            analysis.statistics.mostCommon = Object.entries(frequency)\n                .sort(([,a], [,b]) => b - a)\n                .slice(0, 5);\n        }",
      "end_line": 120,
      "language": "javascript",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 108
    },
    {
      "chunk_type": "Lambda",
      "comment_ranges": [],
      "content": "            data.forEach(item => {\n                const key = typeof item === 'object' ?\n                    JSON.stringify(item) : String(item);\n                frequency[key] = (frequency[key] || 0) + 1;\n            }",
      "end_line": 114,
      "language": "javascript",
      "name": "arrow_lambda",
      "original_indentation": 25,
      "start_line": 110
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "            analysis.statistics.mostCommon = Object.entries(frequency)\n                .sort(([,a], [,b]) => b - a)",
      "end_line": 118,
      "language": "javascript",
      "name": "function_call",
      "original_indentation": 45,
      "start_line": 117
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "            analysis.statistics.mostCommon = Object.entries(frequency)\n                .sort(([,a], [,b]) => b - a)\n                .slice(0, 5)",
      "end_line": 119,
      "language": "javascript",
      "name": "function_call",
      "original_indentation": 45,
      "start_line": 117
    }
  ],
  "source_code": "\nfunction complexDataProcessor(input, options = {}) {\n    const { threshold = 10, enableCaching = true } = options;\n    const cache = new Map();\n    const results = [];\n\n    // Main processing algorithm - extractable middle chunk\n    for (let i = 0; i < input.length; i++) {\n        const item = input[i];\n        const cacheKey = `item_${i}_${item.id || i}`;\n\n        if (enableCaching && cache.has(cacheKey)) {\n            const cachedResult = cache.get(cacheKey);\n            if (cachedResult.valid) {\n                results.push(cachedResult.data);\n                continue;\n            }\n        }\n\n        // Complex transformation logic\n        let processedItem;\n        if (typeof item === 'object' && item !== null) {\n            const score = (item.value || 0) * (item.weight || 1);\n\n            if (score > threshold) {\n                processedItem = {\n                    id: item.id || i,\n                    originalValue: item.value,\n                    score: score,\n                    category: score > threshold * 2 ? 'high' : 'medium',\n                    metadata: {\n                        processed: true,\n                        timestamp: Date.now(),\n                        processor: 'complex'\n                    }\n                };\n            } else {\n                processedItem = {\n                    id: item.id || i,\n                    originalValue: item.value,\n                    score: score + threshold,\n                    category: 'low',\n                    metadata: {\n                        processed: true,\n                        timestamp: Date.now(),\n                        processor: 'simple',\n                        adjusted: true\n                    }\n                };\n            }\n        } else {\n            processedItem = {\n                id: i,\n                originalValue: item,\n                score: Number(item) || 0,\n                category: 'primitive',\n                metadata: {\n                    processed: true,\n                    timestamp: Date.now(),\n                    processor: 'primitive'\n                }\n            };\n        }\n\n        if (enableCaching) {\n            cache.set(cacheKey, { data: processedItem, valid: true });\n        }\n\n        results.push(processedItem);\n    }\n\n    return results;\n}\n\nconst dataAnalyzer = {\n    analyzePatterns(data, patternTypes = ['sequence', 'frequency']) {\n        const analysis = {\n            patterns: [],\n            statistics: {},\n            insights: []\n        };\n\n        // Pattern analysis algorithm - extractable middle chunk\n        if (patternTypes.includes('sequence')) {\n            for (let i = 1; i < data.length; i++) {\n                const current = data[i];\n                const previous = data[i - 1];\n\n                if (typeof current === 'number' && typeof previous === 'number') {\n                    const difference = current - previous;\n                    const percentChange = previous !== 0 ? (difference / previous) * 100 : 0;\n\n                    const pattern = {\n                        type: 'sequence',\n                        position: i,\n                        change: difference,\n                        percentChange: percentChange,\n                        trend: difference > 0 ? 'increasing' :\n                               difference < 0 ? 'decreasing' : 'stable',\n                        magnitude: Math.abs(percentChange) > 50 ? 'significant' : 'minor'\n                    };\n\n                    analysis.patterns.push(pattern);\n                }\n            }\n        }\n\n        if (patternTypes.includes('frequency')) {\n            const frequency = {};\n            data.forEach(item => {\n                const key = typeof item === 'object' ?\n                    JSON.stringify(item) : String(item);\n                frequency[key] = (frequency[key] || 0) + 1;\n            });\n\n            analysis.statistics.frequency = frequency;\n            analysis.statistics.mostCommon = Object.entries(frequency)\n                .sort(([,a], [,b]) => b - a)\n                .slice(0, 5);\n        }\n\n        return analysis;\n    }\n};\n",
  "test_name": "test_javascript_complex_algorithm_extraction",
  "total_chunks": 18
}
