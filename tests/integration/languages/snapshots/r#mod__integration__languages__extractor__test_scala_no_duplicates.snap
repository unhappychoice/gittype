---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [],
      "content": "\npackage com.example.test\n\nobject Calculator {\n    def add(a: Int, b: Int): Int = {\n        val result = a + b\n        result\n    }\n\n    def processValue(value: Any): String = {\n        value match {\n            case s: String => s\"String: $s\"\n            case i: Int => s\"Int: $i\"\n            case _ => \"Unknown\"\n        }\n    }\n\n    val numbers = List(1, 2, 3)\n    val doubled = for {\n        n <- numbers\n        if n > 1\n        result = n * 2\n    } yield result\n\n    val filtered = numbers.filter(x => x > 2).map(y => y * y)\n\n    val attempt = Try {\n        \"123\".toInt\n    }\n}\n\nclass Person(val name: String) {\n    def greet(): String = s\"Hello, $name\"\n\n    def isLongName(): Boolean = {\n        if (name.length > 5) true else false\n    }\n}\n\ntrait Animal {\n    def speak(): String\n\n    def move(): Unit = {\n        println(\"Moving...\")\n    }\n}\n\nextension (s: String) {\n    def isPalindrome: Boolean = s == s.reverse\n}\n\n@deprecated\ndef oldFunction(): Unit = {}\n",
      "end_line": 53,
      "language": "scala",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "object Calculator {\n    def add(a: Int, b: Int): Int = {\n        val result = a + b\n        result\n    }\n\n    def processValue(value: Any): String = {\n        value match {\n            case s: String => s\"String: $s\"\n            case i: Int => s\"Int: $i\"\n            case _ => \"Unknown\"\n        }\n    }\n\n    val numbers = List(1, 2, 3)\n    val doubled = for {\n        n <- numbers\n        if n > 1\n        result = n * 2\n    } yield result\n\n    val filtered = numbers.filter(x => x > 2).map(y => y * y)\n\n    val attempt = Try {\n        \"123\".toInt\n    }\n}",
      "end_line": 30,
      "language": "scala",
      "name": "Calculator",
      "original_indentation": 0,
      "start_line": 4
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    def add(a: Int, b: Int): Int = {\n        val result = a + b\n        result\n    }",
      "end_line": 8,
      "language": "scala",
      "name": "add",
      "original_indentation": 4,
      "start_line": 5
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    def processValue(value: Any): String = {\n        value match {\n            case s: String => s\"String: $s\"\n            case i: Int => s\"Int: $i\"\n            case _ => \"Unknown\"\n        }\n    }",
      "end_line": 16,
      "language": "scala",
      "name": "processValue",
      "original_indentation": 4,
      "start_line": 10
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        value match {\n            case s: String => s\"String: $s\"\n            case i: Int => s\"Int: $i\"\n            case _ => \"Unknown\"\n        }",
      "end_line": 15,
      "language": "scala",
      "name": "match_block",
      "original_indentation": 8,
      "start_line": 11
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [],
      "content": "    val doubled = for {\n        n <- numbers\n        if n > 1\n        result = n * 2\n    } yield result",
      "end_line": 23,
      "language": "scala",
      "name": "for_loop",
      "original_indentation": 18,
      "start_line": 19
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "    val attempt = Try {\n        \"123\".toInt\n    }",
      "end_line": 29,
      "language": "scala",
      "name": "function_call",
      "original_indentation": 18,
      "start_line": 27
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "class Person(val name: String) {\n    def greet(): String = s\"Hello, $name\"\n\n    def isLongName(): Boolean = {\n        if (name.length > 5) true else false\n    }\n}",
      "end_line": 38,
      "language": "scala",
      "name": "Person",
      "original_indentation": 0,
      "start_line": 32
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    def greet(): String = s\"Hello, $name\"",
      "end_line": 33,
      "language": "scala",
      "name": "greet",
      "original_indentation": 4,
      "start_line": 33
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    def isLongName(): Boolean = {\n        if (name.length > 5) true else false\n    }",
      "end_line": 37,
      "language": "scala",
      "name": "isLongName",
      "original_indentation": 4,
      "start_line": 35
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "trait Animal {\n    def speak(): String\n\n    def move(): Unit = {\n        println(\"Moving...\")\n    }\n}",
      "end_line": 46,
      "language": "scala",
      "name": "Animal",
      "original_indentation": 0,
      "start_line": 40
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    def move(): Unit = {\n        println(\"Moving...\")\n    }",
      "end_line": 45,
      "language": "scala",
      "name": "move",
      "original_indentation": 4,
      "start_line": 43
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "extension (s: String) {\n    def isPalindrome: Boolean = s == s.reverse\n}",
      "end_line": 50,
      "language": "scala",
      "name": "unknown",
      "original_indentation": 0,
      "start_line": 48
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    def isPalindrome: Boolean = s == s.reverse",
      "end_line": 49,
      "language": "scala",
      "name": "isPalindrome",
      "original_indentation": 4,
      "start_line": 49
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "@deprecated\ndef oldFunction(): Unit = {}",
      "end_line": 53,
      "language": "scala",
      "name": "oldFunction",
      "original_indentation": 0,
      "start_line": 52
    }
  ],
  "source_code": "\npackage com.example.test\n\nobject Calculator {\n    def add(a: Int, b: Int): Int = {\n        val result = a + b\n        result\n    }\n\n    def processValue(value: Any): String = {\n        value match {\n            case s: String => s\"String: $s\"\n            case i: Int => s\"Int: $i\"\n            case _ => \"Unknown\"\n        }\n    }\n\n    val numbers = List(1, 2, 3)\n    val doubled = for {\n        n <- numbers\n        if n > 1\n        result = n * 2\n    } yield result\n\n    val filtered = numbers.filter(x => x > 2).map(y => y * y)\n\n    val attempt = Try {\n        \"123\".toInt\n    }\n}\n\nclass Person(val name: String) {\n    def greet(): String = s\"Hello, $name\"\n\n    def isLongName(): Boolean = {\n        if (name.length > 5) true else false\n    }\n}\n\ntrait Animal {\n    def speak(): String\n\n    def move(): Unit = {\n        println(\"Moving...\")\n    }\n}\n\nextension (s: String) {\n    def isPalindrome: Boolean = s == s.reverse\n}\n\n@deprecated\ndef oldFunction(): Unit = {}\n",
  "test_name": "test_scala_no_duplicates",
  "total_chunks": 15
}
