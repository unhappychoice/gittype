---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [
        [
          876,
          931
        ],
        [
          1403,
          1434
        ],
        [
          2847,
          2866
        ],
        [
          3291,
          3343
        ],
        [
          3506,
          3528
        ],
        [
          3891,
          3921
        ],
        [
          4094,
          4115
        ]
      ],
      "content": "\npackage main\n\nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n\ntype DataProcessor struct {\n    cache      map[string]interface{}\n    mutex      sync.RWMutex\n    stats      ProcessingStats\n    threshold  int\n}\n\ntype ProcessingStats struct {\n    Processed   int\n    CacheHits   int\n    Errors      int\n    StartTime   time.Time\n}\n\ntype ProcessedItem struct {\n    ID             string\n    OriginalValue  int\n    TransformedValue int\n    Category       string\n    Timestamp      time.Time\n    Metadata       map[string]interface{}\n}\n\nfunc NewDataProcessor(threshold int) *DataProcessor {\n    return &DataProcessor{\n        cache:     make(map[string]interface{}),\n        stats:     ProcessingStats{StartTime: time.Now()},\n        threshold: threshold,\n    }\n}\n\nfunc (dp *DataProcessor) ProcessComplexData(items []int) ([]ProcessedItem, error) {\n    var results []ProcessedItem\n\n    // Main processing algorithm - extractable middle chunk\n    for i, value := range items {\n        cacheKey := fmt.Sprintf(\"item_%d_%d\", i, value)\n\n        dp.mutex.RLock()\n        if cached, exists := dp.cache[cacheKey]; exists {\n            dp.mutex.RUnlock()\n\n            if processedItem, ok := cached.(ProcessedItem); ok {\n                results = append(results, processedItem)\n                dp.stats.CacheHits++\n                continue\n            }\n        } else {\n            dp.mutex.RUnlock()\n        }\n\n        // Complex transformation logic\n        var processedItem ProcessedItem\n\n        if value > dp.threshold {\n            transformedValue := value * 2\n            category := \"MEDIUM\"\n            if transformedValue > dp.threshold*3 {\n                category = \"HIGH\"\n            }\n\n            processedItem = ProcessedItem{\n                ID:              fmt.Sprintf(\"item_%d\", i),\n                OriginalValue:   value,\n                TransformedValue: transformedValue,\n                Category:        category,\n                Timestamp:       time.Now(),\n                Metadata: map[string]interface{}{\n                    \"processed\":    true,\n                    \"multiplier\":   2,\n                    \"threshold\":    dp.threshold,\n                    \"processor\":    \"complex\",\n                },\n            }\n        } else {\n            adjustedValue := value + dp.threshold\n            processedItem = ProcessedItem{\n                ID:              fmt.Sprintf(\"item_%d\", i),\n                OriginalValue:   value,\n                TransformedValue: adjustedValue,\n                Category:        \"LOW\",\n                Timestamp:       time.Now(),\n                Metadata: map[string]interface{}{\n                    \"processed\":  true,\n                    \"adjusted\":   true,\n                    \"threshold\":  dp.threshold,\n                    \"processor\":  \"simple\",\n                },\n            }\n        }\n\n        // Cache the result\n        dp.mutex.Lock()\n        dp.cache[cacheKey] = processedItem\n        dp.mutex.Unlock()\n\n        results = append(results, processedItem)\n        dp.stats.Processed++\n    }\n\n    return results, nil\n}\n\nfunc (dp *DataProcessor) AnalyzePatterns(items []ProcessedItem) map[string]interface{} {\n    analysis := make(map[string]interface{})\n    categoryCount := make(map[string]int)\n    valueSum := make(map[string]int)\n\n    // Pattern analysis logic - extractable middle chunk\n    for _, item := range items {\n        category := item.Category\n        categoryCount[category]++\n        valueSum[category] += item.TransformedValue\n\n        // Time-based analysis\n        timeDiff := time.Since(item.Timestamp)\n        if timeDiff < time.Minute {\n            recentKey := fmt.Sprintf(\"%s_recent\", category)\n            if count, exists := categoryCount[recentKey]; exists {\n                categoryCount[recentKey] = count + 1\n            } else {\n                categoryCount[recentKey] = 1\n            }\n        }\n\n        // Value distribution analysis\n        if item.TransformedValue > 1000 {\n            highValueKey := fmt.Sprintf(\"%s_high_value\", category)\n            categoryCount[highValueKey]++\n        }\n    }\n\n    // Calculate averages\n    averages := make(map[string]float64)\n    for category, sum := range valueSum {\n        if count := categoryCount[category]; count > 0 {\n            averages[category] = float64(sum) / float64(count)\n        }\n    }\n\n    analysis[\"category_counts\"] = categoryCount\n    analysis[\"averages\"] = averages\n    analysis[\"total_items\"] = len(items)\n    analysis[\"processing_time\"] = time.Since(dp.stats.StartTime)\n\n    return analysis\n}\n",
      "end_line": 156,
      "language": "go",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "type DataProcessor",
      "end_line": 10,
      "language": "go",
      "name": "name",
      "original_indentation": 5,
      "start_line": 10
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "type DataProcessor struct {\n    cache      map[string]interface{}\n    mutex      sync.RWMutex\n    stats      ProcessingStats\n    threshold  int\n}",
      "end_line": 15,
      "language": "go",
      "name": "struct",
      "original_indentation": 5,
      "start_line": 10
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "type ProcessingStats",
      "end_line": 17,
      "language": "go",
      "name": "name",
      "original_indentation": 5,
      "start_line": 17
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "type ProcessingStats struct {\n    Processed   int\n    CacheHits   int\n    Errors      int\n    StartTime   time.Time\n}",
      "end_line": 22,
      "language": "go",
      "name": "struct",
      "original_indentation": 5,
      "start_line": 17
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "type ProcessedItem",
      "end_line": 24,
      "language": "go",
      "name": "name",
      "original_indentation": 5,
      "start_line": 24
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "type ProcessedItem struct {\n    ID             string\n    OriginalValue  int\n    TransformedValue int\n    Category       string\n    Timestamp      time.Time\n    Metadata       map[string]interface{}\n}",
      "end_line": 31,
      "language": "go",
      "name": "struct",
      "original_indentation": 5,
      "start_line": 24
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "func NewDataProcessor",
      "end_line": 33,
      "language": "go",
      "name": "name",
      "original_indentation": 5,
      "start_line": 33
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "func NewDataProcessor(threshold int) *DataProcessor {\n    return &DataProcessor{\n        cache:     make(map[string]interface{}),\n        stats:     ProcessingStats{StartTime: time.Now()},\n        threshold: threshold,\n    }\n}",
      "end_line": 39,
      "language": "go",
      "name": "function",
      "original_indentation": 0,
      "start_line": 33
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "func (dp *DataProcessor) ProcessComplexData",
      "end_line": 41,
      "language": "go",
      "name": "name",
      "original_indentation": 25,
      "start_line": 41
    },
    {
      "chunk_type": "Method",
      "comment_ranges": [
        [
          121,
          176
        ],
        [
          648,
          679
        ],
        [
          2092,
          2111
        ]
      ],
      "content": "func (dp *DataProcessor) ProcessComplexData(items []int) ([]ProcessedItem, error) {\n    var results []ProcessedItem\n\n    // Main processing algorithm - extractable middle chunk\n    for i, value := range items {\n        cacheKey := fmt.Sprintf(\"item_%d_%d\", i, value)\n\n        dp.mutex.RLock()\n        if cached, exists := dp.cache[cacheKey]; exists {\n            dp.mutex.RUnlock()\n\n            if processedItem, ok := cached.(ProcessedItem); ok {\n                results = append(results, processedItem)\n                dp.stats.CacheHits++\n                continue\n            }\n        } else {\n            dp.mutex.RUnlock()\n        }\n\n        // Complex transformation logic\n        var processedItem ProcessedItem\n\n        if value > dp.threshold {\n            transformedValue := value * 2\n            category := \"MEDIUM\"\n            if transformedValue > dp.threshold*3 {\n                category = \"HIGH\"\n            }\n\n            processedItem = ProcessedItem{\n                ID:              fmt.Sprintf(\"item_%d\", i),\n                OriginalValue:   value,\n                TransformedValue: transformedValue,\n                Category:        category,\n                Timestamp:       time.Now(),\n                Metadata: map[string]interface{}{\n                    \"processed\":    true,\n                    \"multiplier\":   2,\n                    \"threshold\":    dp.threshold,\n                    \"processor\":    \"complex\",\n                },\n            }\n        } else {\n            adjustedValue := value + dp.threshold\n            processedItem = ProcessedItem{\n                ID:              fmt.Sprintf(\"item_%d\", i),\n                OriginalValue:   value,\n                TransformedValue: adjustedValue,\n                Category:        \"LOW\",\n                Timestamp:       time.Now(),\n                Metadata: map[string]interface{}{\n                    \"processed\":  true,\n                    \"adjusted\":   true,\n                    \"threshold\":  dp.threshold,\n                    \"processor\":  \"simple\",\n                },\n            }\n        }\n\n        // Cache the result\n        dp.mutex.Lock()\n        dp.cache[cacheKey] = processedItem\n        dp.mutex.Unlock()\n\n        results = append(results, processedItem)\n        dp.stats.Processed++\n    }\n\n    return results, nil\n}",
      "end_line": 111,
      "language": "go",
      "name": "method",
      "original_indentation": 0,
      "start_line": 41
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "    var results []ProcessedItem",
      "end_line": 42,
      "language": "go",
      "name": "var_block",
      "original_indentation": 4,
      "start_line": 42
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        if cached, exists := dp.cache[cacheKey]; exists {\n            dp.mutex.RUnlock()\n\n            if processedItem, ok := cached.(ProcessedItem); ok {\n                results = append(results, processedItem)\n                dp.stats.CacheHits++\n                continue\n            }\n        }",
      "end_line": 57,
      "language": "go",
      "name": "code_block",
      "original_indentation": 56,
      "start_line": 49
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if cached, exists := dp.cache[cacheKey]; exists {\n            dp.mutex.RUnlock()\n\n            if processedItem, ok := cached.(ProcessedItem); ok {\n                results = append(results, processedItem)\n                dp.stats.CacheHits++\n                continue\n            }\n        } else {\n            dp.mutex.RUnlock()\n        }",
      "end_line": 59,
      "language": "go",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 49
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "            if processedItem, ok := cached.(ProcessedItem); ok {\n                results = append(results, processedItem)\n                dp.stats.CacheHits++\n                continue\n            }",
      "end_line": 56,
      "language": "go",
      "name": "if_block",
      "original_indentation": 12,
      "start_line": 52
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        } else {\n            dp.mutex.RUnlock()\n        }",
      "end_line": 59,
      "language": "go",
      "name": "code_block",
      "original_indentation": 15,
      "start_line": 57
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        var processedItem ProcessedItem",
      "end_line": 62,
      "language": "go",
      "name": "var_block",
      "original_indentation": 8,
      "start_line": 62
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        if value > dp.threshold {\n            transformedValue := value * 2\n            category := \"MEDIUM\"\n            if transformedValue > dp.threshold*3 {\n                category = \"HIGH\"\n            }\n\n            processedItem = ProcessedItem{\n                ID:              fmt.Sprintf(\"item_%d\", i),\n                OriginalValue:   value,\n                TransformedValue: transformedValue,\n                Category:        category,\n                Timestamp:       time.Now(),\n                Metadata: map[string]interface{}{\n                    \"processed\":    true,\n                    \"multiplier\":   2,\n                    \"threshold\":    dp.threshold,\n                    \"processor\":    \"complex\",\n                },\n            }\n        }",
      "end_line": 84,
      "language": "go",
      "name": "code_block",
      "original_indentation": 32,
      "start_line": 64
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if value > dp.threshold {\n            transformedValue := value * 2\n            category := \"MEDIUM\"\n            if transformedValue > dp.threshold*3 {\n                category = \"HIGH\"\n            }\n\n            processedItem = ProcessedItem{\n                ID:              fmt.Sprintf(\"item_%d\", i),\n                OriginalValue:   value,\n                TransformedValue: transformedValue,\n                Category:        category,\n                Timestamp:       time.Now(),\n                Metadata: map[string]interface{}{\n                    \"processed\":    true,\n                    \"multiplier\":   2,\n                    \"threshold\":    dp.threshold,\n                    \"processor\":    \"complex\",\n                },\n            }\n        } else {\n            adjustedValue := value + dp.threshold\n            processedItem = ProcessedItem{\n                ID:              fmt.Sprintf(\"item_%d\", i),\n                OriginalValue:   value,\n                TransformedValue: adjustedValue,\n                Category:        \"LOW\",\n                Timestamp:       time.Now(),\n                Metadata: map[string]interface{}{\n                    \"processed\":  true,\n                    \"adjusted\":   true,\n                    \"threshold\":  dp.threshold,\n                    \"processor\":  \"simple\",\n                },\n            }\n        }",
      "end_line": 99,
      "language": "go",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 64
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "            if transformedValue > dp.threshold*3 {\n                category = \"HIGH\"\n            }",
      "end_line": 69,
      "language": "go",
      "name": "if_block",
      "original_indentation": 12,
      "start_line": 67
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        } else {\n            adjustedValue := value + dp.threshold\n            processedItem = ProcessedItem{\n                ID:              fmt.Sprintf(\"item_%d\", i),\n                OriginalValue:   value,\n                TransformedValue: adjustedValue,\n                Category:        \"LOW\",\n                Timestamp:       time.Now(),\n                Metadata: map[string]interface{}{\n                    \"processed\":  true,\n                    \"adjusted\":   true,\n                    \"threshold\":  dp.threshold,\n                    \"processor\":  \"simple\",\n                },\n            }\n        }",
      "end_line": 99,
      "language": "go",
      "name": "code_block",
      "original_indentation": 15,
      "start_line": 84
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "func (dp *DataProcessor) AnalyzePatterns",
      "end_line": 113,
      "language": "go",
      "name": "name",
      "original_indentation": 25,
      "start_line": 113
    },
    {
      "chunk_type": "Method",
      "comment_ranges": [
        [
          218,
          270
        ],
        [
          433,
          455
        ],
        [
          818,
          848
        ],
        [
          1021,
          1042
        ]
      ],
      "content": "func (dp *DataProcessor) AnalyzePatterns(items []ProcessedItem) map[string]interface{} {\n    analysis := make(map[string]interface{})\n    categoryCount := make(map[string]int)\n    valueSum := make(map[string]int)\n\n    // Pattern analysis logic - extractable middle chunk\n    for _, item := range items {\n        category := item.Category\n        categoryCount[category]++\n        valueSum[category] += item.TransformedValue\n\n        // Time-based analysis\n        timeDiff := time.Since(item.Timestamp)\n        if timeDiff < time.Minute {\n            recentKey := fmt.Sprintf(\"%s_recent\", category)\n            if count, exists := categoryCount[recentKey]; exists {\n                categoryCount[recentKey] = count + 1\n            } else {\n                categoryCount[recentKey] = 1\n            }\n        }\n\n        // Value distribution analysis\n        if item.TransformedValue > 1000 {\n            highValueKey := fmt.Sprintf(\"%s_high_value\", category)\n            categoryCount[highValueKey]++\n        }\n    }\n\n    // Calculate averages\n    averages := make(map[string]float64)\n    for category, sum := range valueSum {\n        if count := categoryCount[category]; count > 0 {\n            averages[category] = float64(sum) / float64(count)\n        }\n    }\n\n    analysis[\"category_counts\"] = categoryCount\n    analysis[\"averages\"] = averages\n    analysis[\"total_items\"] = len(items)\n    analysis[\"processing_time\"] = time.Since(dp.stats.StartTime)\n\n    return analysis\n}",
      "end_line": 156,
      "language": "go",
      "name": "method",
      "original_indentation": 0,
      "start_line": 113
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [],
      "content": "    for _, item := range items {\n        category := item.Category\n        categoryCount[category]++\n        valueSum[category] += item.TransformedValue\n\n        // Time-based analysis\n        timeDiff := time.Since(item.Timestamp)\n        if timeDiff < time.Minute {\n            recentKey := fmt.Sprintf(\"%s_recent\", category)\n            if count, exists := categoryCount[recentKey]; exists {\n                categoryCount[recentKey] = count + 1\n            } else {\n                categoryCount[recentKey] = 1\n            }\n        }\n\n        // Value distribution analysis\n        if item.TransformedValue > 1000 {\n            highValueKey := fmt.Sprintf(\"%s_high_value\", category)\n            categoryCount[highValueKey]++\n        }\n    }",
      "end_line": 140,
      "language": "go",
      "name": "for_loop",
      "original_indentation": 4,
      "start_line": 119
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if timeDiff < time.Minute {\n            recentKey := fmt.Sprintf(\"%s_recent\", category)\n            if count, exists := categoryCount[recentKey]; exists {\n                categoryCount[recentKey] = count + 1\n            } else {\n                categoryCount[recentKey] = 1\n            }\n        }",
      "end_line": 133,
      "language": "go",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 126
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "            if count, exists := categoryCount[recentKey]; exists {\n                categoryCount[recentKey] = count + 1\n            }",
      "end_line": 130,
      "language": "go",
      "name": "code_block",
      "original_indentation": 65,
      "start_line": 128
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "            if count, exists := categoryCount[recentKey]; exists {\n                categoryCount[recentKey] = count + 1\n            } else {\n                categoryCount[recentKey] = 1\n            }",
      "end_line": 132,
      "language": "go",
      "name": "if_block",
      "original_indentation": 12,
      "start_line": 128
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "            } else {\n                categoryCount[recentKey] = 1\n            }",
      "end_line": 132,
      "language": "go",
      "name": "code_block",
      "original_indentation": 19,
      "start_line": 130
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if item.TransformedValue > 1000 {\n            highValueKey := fmt.Sprintf(\"%s_high_value\", category)\n            categoryCount[highValueKey]++\n        }",
      "end_line": 139,
      "language": "go",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 136
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [],
      "content": "    for category, sum := range valueSum {\n        if count := categoryCount[category]; count > 0 {\n            averages[category] = float64(sum) / float64(count)\n        }\n    }",
      "end_line": 148,
      "language": "go",
      "name": "for_loop",
      "original_indentation": 4,
      "start_line": 144
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if count := categoryCount[category]; count > 0 {\n            averages[category] = float64(sum) / float64(count)\n        }",
      "end_line": 147,
      "language": "go",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 145
    }
  ],
  "source_code": "\npackage main\n\nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n\ntype DataProcessor struct {\n    cache      map[string]interface{}\n    mutex      sync.RWMutex\n    stats      ProcessingStats\n    threshold  int\n}\n\ntype ProcessingStats struct {\n    Processed   int\n    CacheHits   int\n    Errors      int\n    StartTime   time.Time\n}\n\ntype ProcessedItem struct {\n    ID             string\n    OriginalValue  int\n    TransformedValue int\n    Category       string\n    Timestamp      time.Time\n    Metadata       map[string]interface{}\n}\n\nfunc NewDataProcessor(threshold int) *DataProcessor {\n    return &DataProcessor{\n        cache:     make(map[string]interface{}),\n        stats:     ProcessingStats{StartTime: time.Now()},\n        threshold: threshold,\n    }\n}\n\nfunc (dp *DataProcessor) ProcessComplexData(items []int) ([]ProcessedItem, error) {\n    var results []ProcessedItem\n\n    // Main processing algorithm - extractable middle chunk\n    for i, value := range items {\n        cacheKey := fmt.Sprintf(\"item_%d_%d\", i, value)\n\n        dp.mutex.RLock()\n        if cached, exists := dp.cache[cacheKey]; exists {\n            dp.mutex.RUnlock()\n\n            if processedItem, ok := cached.(ProcessedItem); ok {\n                results = append(results, processedItem)\n                dp.stats.CacheHits++\n                continue\n            }\n        } else {\n            dp.mutex.RUnlock()\n        }\n\n        // Complex transformation logic\n        var processedItem ProcessedItem\n\n        if value > dp.threshold {\n            transformedValue := value * 2\n            category := \"MEDIUM\"\n            if transformedValue > dp.threshold*3 {\n                category = \"HIGH\"\n            }\n\n            processedItem = ProcessedItem{\n                ID:              fmt.Sprintf(\"item_%d\", i),\n                OriginalValue:   value,\n                TransformedValue: transformedValue,\n                Category:        category,\n                Timestamp:       time.Now(),\n                Metadata: map[string]interface{}{\n                    \"processed\":    true,\n                    \"multiplier\":   2,\n                    \"threshold\":    dp.threshold,\n                    \"processor\":    \"complex\",\n                },\n            }\n        } else {\n            adjustedValue := value + dp.threshold\n            processedItem = ProcessedItem{\n                ID:              fmt.Sprintf(\"item_%d\", i),\n                OriginalValue:   value,\n                TransformedValue: adjustedValue,\n                Category:        \"LOW\",\n                Timestamp:       time.Now(),\n                Metadata: map[string]interface{}{\n                    \"processed\":  true,\n                    \"adjusted\":   true,\n                    \"threshold\":  dp.threshold,\n                    \"processor\":  \"simple\",\n                },\n            }\n        }\n\n        // Cache the result\n        dp.mutex.Lock()\n        dp.cache[cacheKey] = processedItem\n        dp.mutex.Unlock()\n\n        results = append(results, processedItem)\n        dp.stats.Processed++\n    }\n\n    return results, nil\n}\n\nfunc (dp *DataProcessor) AnalyzePatterns(items []ProcessedItem) map[string]interface{} {\n    analysis := make(map[string]interface{})\n    categoryCount := make(map[string]int)\n    valueSum := make(map[string]int)\n\n    // Pattern analysis logic - extractable middle chunk\n    for _, item := range items {\n        category := item.Category\n        categoryCount[category]++\n        valueSum[category] += item.TransformedValue\n\n        // Time-based analysis\n        timeDiff := time.Since(item.Timestamp)\n        if timeDiff < time.Minute {\n            recentKey := fmt.Sprintf(\"%s_recent\", category)\n            if count, exists := categoryCount[recentKey]; exists {\n                categoryCount[recentKey] = count + 1\n            } else {\n                categoryCount[recentKey] = 1\n            }\n        }\n\n        // Value distribution analysis\n        if item.TransformedValue > 1000 {\n            highValueKey := fmt.Sprintf(\"%s_high_value\", category)\n            categoryCount[highValueKey]++\n        }\n    }\n\n    // Calculate averages\n    averages := make(map[string]float64)\n    for category, sum := range valueSum {\n        if count := categoryCount[category]; count > 0 {\n            averages[category] = float64(sum) / float64(count)\n        }\n    }\n\n    analysis[\"category_counts\"] = categoryCount\n    analysis[\"averages\"] = averages\n    analysis[\"total_items\"] = len(items)\n    analysis[\"processing_time\"] = time.Since(dp.stats.StartTime)\n\n    return analysis\n}\n",
  "test_name": "test_go_complex_algorithm_extraction",
  "total_chunks": 31
}
