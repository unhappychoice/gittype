---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [
        [
          759,
          814
        ],
        [
          1659,
          1699
        ],
        [
          2523,
          2546
        ],
        [
          2678,
          2700
        ],
        [
          2802,
          2823
        ],
        [
          3040,
          3068
        ],
        [
          3375,
          3401
        ],
        [
          3514,
          3566
        ],
        [
          4066,
          4088
        ],
        [
          4533,
          4555
        ]
      ],
      "content": "\nimport 'dart:async';\nimport 'dart:math';\n\nclass ProcessedItem {\n  final int id;\n  final int originalValue;\n  final int transformedValue;\n  final String category;\n  final DateTime timestamp;\n  final Map<String, dynamic> metadata;\n\n  ProcessedItem({\n    required this.id,\n    required this.originalValue,\n    required this.transformedValue,\n    required this.category,\n    required this.timestamp,\n    required this.metadata,\n  });\n}\n\nclass DataProcessor {\n  final Map<String, ProcessedItem> _cache = {};\n  final List<ProcessedItem> _processingLog = [];\n  final int _threshold;\n\n  DataProcessor(this._threshold);\n\n  Future<List<ProcessedItem>> processComplexData(List<int> input) async {\n    final results = <ProcessedItem>[];\n    var processedCount = 0;\n\n    // Main processing algorithm - extractable middle chunk\n    for (var i = 0; i < input.length; i++) {\n      final value = input[i];\n      final cacheKey = 'item_${i}_$value';\n\n      if (_cache.containsKey(cacheKey)) {\n        final cachedItem = _cache[cacheKey]!;\n        results.add(cachedItem);\n        continue;\n      }\n\n      late ProcessedItem processedItem;\n      if (value > _threshold) {\n        final transformedValue = value * 2;\n        final category = transformedValue > _threshold * 3 ? 'HIGH' : 'MEDIUM';\n\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: transformedValue,\n          category: category,\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'multiplier': 0,\n            'processor': 'enhanced',\n          },\n        );\n\n        processedCount++;\n\n        // Additional processing for high values\n        if (transformedValue > 100) {\n          processedItem = ProcessedItem(\n            id: processedItem.id,\n            originalValue: processedItem.originalValue,\n            transformedValue: processedItem.transformedValue + 10,\n            category: processedItem.category,\n            timestamp: processedItem.timestamp,\n            metadata: {...processedItem.metadata, 'bonus': true},\n          );\n        }\n      } else if (value > 0) {\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: value + _threshold,\n          category: 'LOW',\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'adjusted': true,\n            'processor': 'basic',\n          },\n        );\n      } else {\n        continue; // skip negative values\n      }\n\n      _cache[cacheKey] = processedItem;\n      _processingLog.add(processedItem);\n      results.add(processedItem);\n\n      // Simulate async work\n      if (i % 10 == 0) {\n        await Future.delayed(Duration(milliseconds: 1));\n      }\n    }\n\n    // Finalization logic\n    if (processedCount > 0) {\n      final average = results.map((r) => r.transformedValue).reduce((a, b) => a + b) / results.length;\n      print('Processing complete. Average: ${average.toStringAsFixed(2)}');\n\n      // Add processing statistics\n      for (final item in results) {\n        item.metadata['processing_average'] = average;\n      }\n    }\n\n    return results;\n  }\n\n  Map<String, dynamic> analyzePatterns(List<ProcessedItem> items) {\n    final analysis = <String, dynamic>{};\n    final categoryGroups = <String, List<ProcessedItem>>{};\n\n    // Group items by category\n    for (final item in items) {\n      categoryGroups.putIfAbsent(item.category, () => []).add(item);\n    }\n\n    // Pattern analysis logic - extractable middle chunk\n    for (final entry in categoryGroups.entries) {\n      final category = entry.key;\n      final categoryItems = entry.value;\n\n      final values = categoryItems.map((i) => i.transformedValue);\n      final categoryAnalysis = {\n        'count': categoryItems.length,\n        'percentage': (categoryItems.length / items.length) * 100,\n        'avg_value': values.reduce((a, b) => a + b) / values.length,\n        'min_value': values.reduce(min),\n        'max_value': values.reduce(max),\n      };\n\n      // Time-based analysis\n      final now = DateTime.now();\n      final recentItems = categoryItems.where((i) =>\n        now.difference(i.timestamp).inMinutes < 1\n      ).toList();\n\n      if (recentItems.isNotEmpty) {\n        final recentValues = recentItems.map((i) => i.transformedValue);\n        categoryAnalysis['recent_count'] = recentItems.length;\n        categoryAnalysis['recent_avg'] = recentValues.reduce((a, b) => a + b) / recentValues.length;\n      }\n\n      // High-value analysis\n      final highValueItems = categoryItems.where((i) => i.transformedValue > 1000);\n      if (highValueItems.isNotEmpty) {\n        categoryAnalysis['high_value_count'] = highValueItems.length;\n      }\n\n      analysis[category] = categoryAnalysis;\n    }\n\n    analysis['total_items'] = items.length;\n    analysis['processing_time'] = DateTime.now().toIso8601String();\n\n    return analysis;\n  }\n}\n",
      "end_line": 166,
      "language": "dart",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "class ProcessedItem",
      "end_line": 5,
      "language": "dart",
      "name": "name",
      "original_indentation": 6,
      "start_line": 5
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "class ProcessedItem {\n  final int id;\n  final int originalValue;\n  final int transformedValue;\n  final String category;\n  final DateTime timestamp;\n  final Map<String, dynamic> metadata;\n\n  ProcessedItem({\n    required this.id,\n    required this.originalValue,\n    required this.transformedValue,\n    required this.category,\n    required this.timestamp,\n    required this.metadata,\n  });\n}",
      "end_line": 21,
      "language": "dart",
      "name": "class",
      "original_indentation": 0,
      "start_line": 5
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "class DataProcessor",
      "end_line": 23,
      "language": "dart",
      "name": "name",
      "original_indentation": 6,
      "start_line": 23
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [
        [
          325,
          380
        ],
        [
          1225,
          1265
        ],
        [
          2089,
          2112
        ],
        [
          2244,
          2266
        ],
        [
          2368,
          2389
        ],
        [
          2606,
          2634
        ],
        [
          2941,
          2967
        ],
        [
          3080,
          3132
        ],
        [
          3632,
          3654
        ],
        [
          4099,
          4121
        ]
      ],
      "content": "class DataProcessor {\n  final Map<String, ProcessedItem> _cache = {};\n  final List<ProcessedItem> _processingLog = [];\n  final int _threshold;\n\n  DataProcessor(this._threshold);\n\n  Future<List<ProcessedItem>> processComplexData(List<int> input) async {\n    final results = <ProcessedItem>[];\n    var processedCount = 0;\n\n    // Main processing algorithm - extractable middle chunk\n    for (var i = 0; i < input.length; i++) {\n      final value = input[i];\n      final cacheKey = 'item_${i}_$value';\n\n      if (_cache.containsKey(cacheKey)) {\n        final cachedItem = _cache[cacheKey]!;\n        results.add(cachedItem);\n        continue;\n      }\n\n      late ProcessedItem processedItem;\n      if (value > _threshold) {\n        final transformedValue = value * 2;\n        final category = transformedValue > _threshold * 3 ? 'HIGH' : 'MEDIUM';\n\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: transformedValue,\n          category: category,\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'multiplier': 0,\n            'processor': 'enhanced',\n          },\n        );\n\n        processedCount++;\n\n        // Additional processing for high values\n        if (transformedValue > 100) {\n          processedItem = ProcessedItem(\n            id: processedItem.id,\n            originalValue: processedItem.originalValue,\n            transformedValue: processedItem.transformedValue + 10,\n            category: processedItem.category,\n            timestamp: processedItem.timestamp,\n            metadata: {...processedItem.metadata, 'bonus': true},\n          );\n        }\n      } else if (value > 0) {\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: value + _threshold,\n          category: 'LOW',\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'adjusted': true,\n            'processor': 'basic',\n          },\n        );\n      } else {\n        continue; // skip negative values\n      }\n\n      _cache[cacheKey] = processedItem;\n      _processingLog.add(processedItem);\n      results.add(processedItem);\n\n      // Simulate async work\n      if (i % 10 == 0) {\n        await Future.delayed(Duration(milliseconds: 1));\n      }\n    }\n\n    // Finalization logic\n    if (processedCount > 0) {\n      final average = results.map((r) => r.transformedValue).reduce((a, b) => a + b) / results.length;\n      print('Processing complete. Average: ${average.toStringAsFixed(2)}');\n\n      // Add processing statistics\n      for (final item in results) {\n        item.metadata['processing_average'] = average;\n      }\n    }\n\n    return results;\n  }\n\n  Map<String, dynamic> analyzePatterns(List<ProcessedItem> items) {\n    final analysis = <String, dynamic>{};\n    final categoryGroups = <String, List<ProcessedItem>>{};\n\n    // Group items by category\n    for (final item in items) {\n      categoryGroups.putIfAbsent(item.category, () => []).add(item);\n    }\n\n    // Pattern analysis logic - extractable middle chunk\n    for (final entry in categoryGroups.entries) {\n      final category = entry.key;\n      final categoryItems = entry.value;\n\n      final values = categoryItems.map((i) => i.transformedValue);\n      final categoryAnalysis = {\n        'count': categoryItems.length,\n        'percentage': (categoryItems.length / items.length) * 100,\n        'avg_value': values.reduce((a, b) => a + b) / values.length,\n        'min_value': values.reduce(min),\n        'max_value': values.reduce(max),\n      };\n\n      // Time-based analysis\n      final now = DateTime.now();\n      final recentItems = categoryItems.where((i) =>\n        now.difference(i.timestamp).inMinutes < 1\n      ).toList();\n\n      if (recentItems.isNotEmpty) {\n        final recentValues = recentItems.map((i) => i.transformedValue);\n        categoryAnalysis['recent_count'] = recentItems.length;\n        categoryAnalysis['recent_avg'] = recentValues.reduce((a, b) => a + b) / recentValues.length;\n      }\n\n      // High-value analysis\n      final highValueItems = categoryItems.where((i) => i.transformedValue > 1000);\n      if (highValueItems.isNotEmpty) {\n        categoryAnalysis['high_value_count'] = highValueItems.length;\n      }\n\n      analysis[category] = categoryAnalysis;\n    }\n\n    analysis['total_items'] = items.length;\n    analysis['processing_time'] = DateTime.now().toIso8601String();\n\n    return analysis;\n  }\n}",
      "end_line": 166,
      "language": "dart",
      "name": "class",
      "original_indentation": 0,
      "start_line": 23
    },
    {
      "chunk_type": "Method",
      "comment_ranges": [],
      "content": "  Future<List<ProcessedItem>> processComplexData(List<int> input)",
      "end_line": 30,
      "language": "dart",
      "name": "method",
      "original_indentation": 2,
      "start_line": 30
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "    final results = <ProcessedItem>[];",
      "end_line": 31,
      "language": "dart",
      "name": "variable",
      "original_indentation": 4,
      "start_line": 31
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "    var processedCount = 0;",
      "end_line": 32,
      "language": "dart",
      "name": "variable",
      "original_indentation": 4,
      "start_line": 32
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "    for (var i = 0;",
      "end_line": 35,
      "language": "dart",
      "name": "variable",
      "original_indentation": 9,
      "start_line": 35
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [
        [
          844,
          884
        ],
        [
          1708,
          1731
        ],
        [
          1863,
          1885
        ]
      ],
      "content": "    for (var i = 0; i < input.length; i++) {\n      final value = input[i];\n      final cacheKey = 'item_${i}_$value';\n\n      if (_cache.containsKey(cacheKey)) {\n        final cachedItem = _cache[cacheKey]!;\n        results.add(cachedItem);\n        continue;\n      }\n\n      late ProcessedItem processedItem;\n      if (value > _threshold) {\n        final transformedValue = value * 2;\n        final category = transformedValue > _threshold * 3 ? 'HIGH' : 'MEDIUM';\n\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: transformedValue,\n          category: category,\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'multiplier': 0,\n            'processor': 'enhanced',\n          },\n        );\n\n        processedCount++;\n\n        // Additional processing for high values\n        if (transformedValue > 100) {\n          processedItem = ProcessedItem(\n            id: processedItem.id,\n            originalValue: processedItem.originalValue,\n            transformedValue: processedItem.transformedValue + 10,\n            category: processedItem.category,\n            timestamp: processedItem.timestamp,\n            metadata: {...processedItem.metadata, 'bonus': true},\n          );\n        }\n      } else if (value > 0) {\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: value + _threshold,\n          category: 'LOW',\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'adjusted': true,\n            'processor': 'basic',\n          },\n        );\n      } else {\n        continue; // skip negative values\n      }\n\n      _cache[cacheKey] = processedItem;\n      _processingLog.add(processedItem);\n      results.add(processedItem);\n\n      // Simulate async work\n      if (i % 10 == 0) {\n        await Future.delayed(Duration(milliseconds: 1));\n      }\n    }",
      "end_line": 101,
      "language": "dart",
      "name": "for_loop",
      "original_indentation": 4,
      "start_line": 35
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      final value = input[i];",
      "end_line": 36,
      "language": "dart",
      "name": "variable",
      "original_indentation": 6,
      "start_line": 36
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      final cacheKey = 'item_${i}_$value';",
      "end_line": 37,
      "language": "dart",
      "name": "variable",
      "original_indentation": 6,
      "start_line": 37
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "      if (_cache.containsKey(cacheKey)) {\n        final cachedItem = _cache[cacheKey]!;\n        results.add(cachedItem);\n        continue;\n      }",
      "end_line": 43,
      "language": "dart",
      "name": "if_block",
      "original_indentation": 6,
      "start_line": 39
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        final cachedItem = _cache[cacheKey]!;",
      "end_line": 40,
      "language": "dart",
      "name": "variable",
      "original_indentation": 8,
      "start_line": 40
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      late ProcessedItem processedItem;",
      "end_line": 45,
      "language": "dart",
      "name": "variable",
      "original_indentation": 6,
      "start_line": 45
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [
        [
          537,
          577
        ]
      ],
      "content": "      if (value > _threshold) {\n        final transformedValue = value * 2;\n        final category = transformedValue > _threshold * 3 ? 'HIGH' : 'MEDIUM';\n\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: transformedValue,\n          category: category,\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'multiplier': 0,\n            'processor': 'enhanced',\n          },\n        );\n\n        processedCount++;\n\n        // Additional processing for high values\n        if (transformedValue > 100) {\n          processedItem = ProcessedItem(\n            id: processedItem.id,\n            originalValue: processedItem.originalValue,\n            transformedValue: processedItem.transformedValue + 10,\n            category: processedItem.category,\n            timestamp: processedItem.timestamp,\n            metadata: {...processedItem.metadata, 'bonus': true},\n          );\n        }\n      }",
      "end_line": 76,
      "language": "dart",
      "name": "code_block",
      "original_indentation": 30,
      "start_line": 46
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [
        [
          537,
          577
        ],
        [
          1401,
          1424
        ]
      ],
      "content": "      if (value > _threshold) {\n        final transformedValue = value * 2;\n        final category = transformedValue > _threshold * 3 ? 'HIGH' : 'MEDIUM';\n\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: transformedValue,\n          category: category,\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'multiplier': 0,\n            'processor': 'enhanced',\n          },\n        );\n\n        processedCount++;\n\n        // Additional processing for high values\n        if (transformedValue > 100) {\n          processedItem = ProcessedItem(\n            id: processedItem.id,\n            originalValue: processedItem.originalValue,\n            transformedValue: processedItem.transformedValue + 10,\n            category: processedItem.category,\n            timestamp: processedItem.timestamp,\n            metadata: {...processedItem.metadata, 'bonus': true},\n          );\n        }\n      } else if (value > 0) {\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: value + _threshold,\n          category: 'LOW',\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'adjusted': true,\n            'processor': 'basic',\n          },\n        );\n      } else {\n        continue; // skip negative values\n      }",
      "end_line": 91,
      "language": "dart",
      "name": "if_block",
      "original_indentation": 6,
      "start_line": 46
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        final transformedValue = value * 2;",
      "end_line": 47,
      "language": "dart",
      "name": "variable",
      "original_indentation": 8,
      "start_line": 47
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        final category = transformedValue > _threshold * 3 ? 'HIGH' : 'MEDIUM';",
      "end_line": 48,
      "language": "dart",
      "name": "variable",
      "original_indentation": 8,
      "start_line": 48
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if (transformedValue > 100) {\n          processedItem = ProcessedItem(\n            id: processedItem.id,\n            originalValue: processedItem.originalValue,\n            transformedValue: processedItem.transformedValue + 10,\n            category: processedItem.category,\n            timestamp: processedItem.timestamp,\n            metadata: {...processedItem.metadata, 'bonus': true},\n          );\n        }",
      "end_line": 75,
      "language": "dart",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 66
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      } else if (value > 0) {\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: value + _threshold,\n          category: 'LOW',\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'adjusted': true,\n            'processor': 'basic',\n          },\n        );\n      }",
      "end_line": 89,
      "language": "dart",
      "name": "code_block",
      "original_indentation": 28,
      "start_line": 76
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [
        [
          404,
          427
        ]
      ],
      "content": "      } else if (value > 0) {\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: value + _threshold,\n          category: 'LOW',\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'adjusted': true,\n            'processor': 'basic',\n          },\n        );\n      } else {\n        continue; // skip negative values\n      }",
      "end_line": 91,
      "language": "dart",
      "name": "if_block",
      "original_indentation": 13,
      "start_line": 76
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [
        [
          33,
          56
        ]
      ],
      "content": "      } else {\n        continue; // skip negative values\n      }",
      "end_line": 91,
      "language": "dart",
      "name": "code_block",
      "original_indentation": 13,
      "start_line": 89
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "      if (i % 10 == 0) {\n        await Future.delayed(Duration(milliseconds: 1));\n      }",
      "end_line": 100,
      "language": "dart",
      "name": "if_block",
      "original_indentation": 6,
      "start_line": 98
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [
        [
          216,
          244
        ]
      ],
      "content": "    if (processedCount > 0) {\n      final average = results.map((r) => r.transformedValue).reduce((a, b) => a + b) / results.length;\n      print('Processing complete. Average: ${average.toStringAsFixed(2)}');\n\n      // Add processing statistics\n      for (final item in results) {\n        item.metadata['processing_average'] = average;\n      }\n    }",
      "end_line": 112,
      "language": "dart",
      "name": "if_block",
      "original_indentation": 4,
      "start_line": 104
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      final average = results.map((r) => r.transformedValue).reduce((a, b) => a + b) / results.length;",
      "end_line": 105,
      "language": "dart",
      "name": "variable",
      "original_indentation": 6,
      "start_line": 105
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [],
      "content": "      for (final item in results) {\n        item.metadata['processing_average'] = average;\n      }",
      "end_line": 111,
      "language": "dart",
      "name": "for_loop",
      "original_indentation": 6,
      "start_line": 109
    },
    {
      "chunk_type": "Method",
      "comment_ranges": [],
      "content": "  Map<String, dynamic> analyzePatterns(List<ProcessedItem> items)",
      "end_line": 117,
      "language": "dart",
      "name": "method",
      "original_indentation": 2,
      "start_line": 117
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [
        [
          175,
          201
        ],
        [
          314,
          366
        ],
        [
          866,
          888
        ],
        [
          1333,
          1355
        ]
      ],
      "content": "  Map<String, dynamic> analyzePatterns(List<ProcessedItem> items) {\n    final analysis = <String, dynamic>{};\n    final categoryGroups = <String, List<ProcessedItem>>{};\n\n    // Group items by category\n    for (final item in items) {\n      categoryGroups.putIfAbsent(item.category, () => []).add(item);\n    }\n\n    // Pattern analysis logic - extractable middle chunk\n    for (final entry in categoryGroups.entries) {\n      final category = entry.key;\n      final categoryItems = entry.value;\n\n      final values = categoryItems.map((i) => i.transformedValue);\n      final categoryAnalysis = {\n        'count': categoryItems.length,\n        'percentage': (categoryItems.length / items.length) * 100,\n        'avg_value': values.reduce((a, b) => a + b) / values.length,\n        'min_value': values.reduce(min),\n        'max_value': values.reduce(max),\n      };\n\n      // Time-based analysis\n      final now = DateTime.now();\n      final recentItems = categoryItems.where((i) =>\n        now.difference(i.timestamp).inMinutes < 1\n      ).toList();\n\n      if (recentItems.isNotEmpty) {\n        final recentValues = recentItems.map((i) => i.transformedValue);\n        categoryAnalysis['recent_count'] = recentItems.length;\n        categoryAnalysis['recent_avg'] = recentValues.reduce((a, b) => a + b) / recentValues.length;\n      }\n\n      // High-value analysis\n      final highValueItems = categoryItems.where((i) => i.transformedValue > 1000);\n      if (highValueItems.isNotEmpty) {\n        categoryAnalysis['high_value_count'] = highValueItems.length;\n      }\n\n      analysis[category] = categoryAnalysis;\n    }\n\n    analysis['total_items'] = items.length;\n    analysis['processing_time'] = DateTime.now().toIso8601String();\n\n    return analysis;\n  }",
      "end_line": 165,
      "language": "dart",
      "name": "code_block",
      "original_indentation": 66,
      "start_line": 117
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "    final analysis = <String, dynamic>{};",
      "end_line": 118,
      "language": "dart",
      "name": "variable",
      "original_indentation": 4,
      "start_line": 118
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "    final categoryGroups = <String, List<ProcessedItem>>{};",
      "end_line": 119,
      "language": "dart",
      "name": "variable",
      "original_indentation": 4,
      "start_line": 119
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [],
      "content": "    for (final item in items) {\n      categoryGroups.putIfAbsent(item.category, () => []).add(item);\n    }",
      "end_line": 124,
      "language": "dart",
      "name": "for_loop",
      "original_indentation": 4,
      "start_line": 122
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [
        [
          499,
          521
        ],
        [
          966,
          988
        ]
      ],
      "content": "    for (final entry in categoryGroups.entries) {\n      final category = entry.key;\n      final categoryItems = entry.value;\n\n      final values = categoryItems.map((i) => i.transformedValue);\n      final categoryAnalysis = {\n        'count': categoryItems.length,\n        'percentage': (categoryItems.length / items.length) * 100,\n        'avg_value': values.reduce((a, b) => a + b) / values.length,\n        'min_value': values.reduce(min),\n        'max_value': values.reduce(max),\n      };\n\n      // Time-based analysis\n      final now = DateTime.now();\n      final recentItems = categoryItems.where((i) =>\n        now.difference(i.timestamp).inMinutes < 1\n      ).toList();\n\n      if (recentItems.isNotEmpty) {\n        final recentValues = recentItems.map((i) => i.transformedValue);\n        categoryAnalysis['recent_count'] = recentItems.length;\n        categoryAnalysis['recent_avg'] = recentValues.reduce((a, b) => a + b) / recentValues.length;\n      }\n\n      // High-value analysis\n      final highValueItems = categoryItems.where((i) => i.transformedValue > 1000);\n      if (highValueItems.isNotEmpty) {\n        categoryAnalysis['high_value_count'] = highValueItems.length;\n      }\n\n      analysis[category] = categoryAnalysis;\n    }",
      "end_line": 159,
      "language": "dart",
      "name": "for_loop",
      "original_indentation": 4,
      "start_line": 127
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      final category = entry.key;",
      "end_line": 128,
      "language": "dart",
      "name": "variable",
      "original_indentation": 6,
      "start_line": 128
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      final categoryItems = entry.value;",
      "end_line": 129,
      "language": "dart",
      "name": "variable",
      "original_indentation": 6,
      "start_line": 129
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      final values = categoryItems.map((i) => i.transformedValue);",
      "end_line": 131,
      "language": "dart",
      "name": "variable",
      "original_indentation": 6,
      "start_line": 131
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      final categoryAnalysis",
      "end_line": 132,
      "language": "dart",
      "name": "name",
      "original_indentation": 12,
      "start_line": 132
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      final categoryAnalysis = {\n        'count': categoryItems.length,\n        'percentage': (categoryItems.length / items.length) * 100,\n        'avg_value': values.reduce((a, b) => a + b) / values.length,\n        'min_value': values.reduce(min),\n        'max_value': values.reduce(max),\n      };",
      "end_line": 138,
      "language": "dart",
      "name": "variable",
      "original_indentation": 6,
      "start_line": 132
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      final now = DateTime.now();",
      "end_line": 141,
      "language": "dart",
      "name": "variable",
      "original_indentation": 6,
      "start_line": 141
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      final recentItems",
      "end_line": 142,
      "language": "dart",
      "name": "name",
      "original_indentation": 12,
      "start_line": 142
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      final recentItems = categoryItems.where((i) =>\n        now.difference(i.timestamp).inMinutes < 1\n      ).toList();",
      "end_line": 144,
      "language": "dart",
      "name": "variable",
      "original_indentation": 6,
      "start_line": 142
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "      if (recentItems.isNotEmpty) {\n        final recentValues = recentItems.map((i) => i.transformedValue);\n        categoryAnalysis['recent_count'] = recentItems.length;\n        categoryAnalysis['recent_avg'] = recentValues.reduce((a, b) => a + b) / recentValues.length;\n      }",
      "end_line": 150,
      "language": "dart",
      "name": "if_block",
      "original_indentation": 6,
      "start_line": 146
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        final recentValues = recentItems.map((i) => i.transformedValue);",
      "end_line": 147,
      "language": "dart",
      "name": "variable",
      "original_indentation": 8,
      "start_line": 147
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "      final highValueItems = categoryItems.where((i) => i.transformedValue > 1000);",
      "end_line": 153,
      "language": "dart",
      "name": "variable",
      "original_indentation": 6,
      "start_line": 153
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "      if (highValueItems.isNotEmpty) {\n        categoryAnalysis['high_value_count'] = highValueItems.length;\n      }",
      "end_line": 156,
      "language": "dart",
      "name": "if_block",
      "original_indentation": 6,
      "start_line": 154
    }
  ],
  "source_code": "\nimport 'dart:async';\nimport 'dart:math';\n\nclass ProcessedItem {\n  final int id;\n  final int originalValue;\n  final int transformedValue;\n  final String category;\n  final DateTime timestamp;\n  final Map<String, dynamic> metadata;\n\n  ProcessedItem({\n    required this.id,\n    required this.originalValue,\n    required this.transformedValue,\n    required this.category,\n    required this.timestamp,\n    required this.metadata,\n  });\n}\n\nclass DataProcessor {\n  final Map<String, ProcessedItem> _cache = {};\n  final List<ProcessedItem> _processingLog = [];\n  final int _threshold;\n\n  DataProcessor(this._threshold);\n\n  Future<List<ProcessedItem>> processComplexData(List<int> input) async {\n    final results = <ProcessedItem>[];\n    var processedCount = 0;\n\n    // Main processing algorithm - extractable middle chunk\n    for (var i = 0; i < input.length; i++) {\n      final value = input[i];\n      final cacheKey = 'item_${i}_$value';\n\n      if (_cache.containsKey(cacheKey)) {\n        final cachedItem = _cache[cacheKey]!;\n        results.add(cachedItem);\n        continue;\n      }\n\n      late ProcessedItem processedItem;\n      if (value > _threshold) {\n        final transformedValue = value * 2;\n        final category = transformedValue > _threshold * 3 ? 'HIGH' : 'MEDIUM';\n\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: transformedValue,\n          category: category,\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'multiplier': 0,\n            'processor': 'enhanced',\n          },\n        );\n\n        processedCount++;\n\n        // Additional processing for high values\n        if (transformedValue > 100) {\n          processedItem = ProcessedItem(\n            id: processedItem.id,\n            originalValue: processedItem.originalValue,\n            transformedValue: processedItem.transformedValue + 10,\n            category: processedItem.category,\n            timestamp: processedItem.timestamp,\n            metadata: {...processedItem.metadata, 'bonus': true},\n          );\n        }\n      } else if (value > 0) {\n        processedItem = ProcessedItem(\n          id: i,\n          originalValue: value,\n          transformedValue: value + _threshold,\n          category: 'LOW',\n          timestamp: DateTime.now(),\n          metadata: {\n            'processed': true,\n            'adjusted': true,\n            'processor': 'basic',\n          },\n        );\n      } else {\n        continue; // skip negative values\n      }\n\n      _cache[cacheKey] = processedItem;\n      _processingLog.add(processedItem);\n      results.add(processedItem);\n\n      // Simulate async work\n      if (i % 10 == 0) {\n        await Future.delayed(Duration(milliseconds: 1));\n      }\n    }\n\n    // Finalization logic\n    if (processedCount > 0) {\n      final average = results.map((r) => r.transformedValue).reduce((a, b) => a + b) / results.length;\n      print('Processing complete. Average: ${average.toStringAsFixed(2)}');\n\n      // Add processing statistics\n      for (final item in results) {\n        item.metadata['processing_average'] = average;\n      }\n    }\n\n    return results;\n  }\n\n  Map<String, dynamic> analyzePatterns(List<ProcessedItem> items) {\n    final analysis = <String, dynamic>{};\n    final categoryGroups = <String, List<ProcessedItem>>{};\n\n    // Group items by category\n    for (final item in items) {\n      categoryGroups.putIfAbsent(item.category, () => []).add(item);\n    }\n\n    // Pattern analysis logic - extractable middle chunk\n    for (final entry in categoryGroups.entries) {\n      final category = entry.key;\n      final categoryItems = entry.value;\n\n      final values = categoryItems.map((i) => i.transformedValue);\n      final categoryAnalysis = {\n        'count': categoryItems.length,\n        'percentage': (categoryItems.length / items.length) * 100,\n        'avg_value': values.reduce((a, b) => a + b) / values.length,\n        'min_value': values.reduce(min),\n        'max_value': values.reduce(max),\n      };\n\n      // Time-based analysis\n      final now = DateTime.now();\n      final recentItems = categoryItems.where((i) =>\n        now.difference(i.timestamp).inMinutes < 1\n      ).toList();\n\n      if (recentItems.isNotEmpty) {\n        final recentValues = recentItems.map((i) => i.transformedValue);\n        categoryAnalysis['recent_count'] = recentItems.length;\n        categoryAnalysis['recent_avg'] = recentValues.reduce((a, b) => a + b) / recentValues.length;\n      }\n\n      // High-value analysis\n      final highValueItems = categoryItems.where((i) => i.transformedValue > 1000);\n      if (highValueItems.isNotEmpty) {\n        categoryAnalysis['high_value_count'] = highValueItems.length;\n      }\n\n      analysis[category] = categoryAnalysis;\n    }\n\n    analysis['total_items'] = items.length;\n    analysis['processing_time'] = DateTime.now().toIso8601String();\n\n    return analysis;\n  }\n}\n",
  "test_name": "test_dart_complex_algorithm_extraction",
  "total_chunks": 45
}
