---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [
        [
          1,
          25
        ],
        [
          100,
          113
        ],
        [
          165,
          184
        ],
        [
          266,
          290
        ],
        [
          406,
          448
        ]
      ],
      "content": "\n// Interface declaration\ninterface User {\n    id: number;\n    name: string;\n    email?: string;\n}\n\n// Type alias\ntype Status = 'pending' | 'completed' | 'failed';\n\n// Enum declaration\nenum Color {\n    Red = '#ff0000',\n    Green = '#00ff00',\n    Blue = '#0000ff'\n}\n\n// Namespace declaration\nnamespace Utils {\n    export function formatDate(date: Date): string {\n        return date.toISOString();\n    }\n}\n\n// Existing constructs (should still work)\nclass UserService {\n    private users: User[] = [];\n\n    addUser(user: User): void {\n        this.users.push(user);\n    }\n\n    getUserById(id: number): User | undefined {\n        return this.users.find(u => u.id === id);\n    }\n}\n\nfunction processUser(user: User): Status {\n    return 'pending';\n}\n\nconst calculateTotal = (items: number[]): number => {\n    return items.reduce((sum, item) => sum + item, 0);\n};\n",
      "end_line": 45,
      "language": "typescript",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "Interface",
      "comment_ranges": [],
      "content": "interface User {\n    id: number;\n    name: string;\n    email?: string;\n}",
      "end_line": 7,
      "language": "typescript",
      "name": "User",
      "original_indentation": 0,
      "start_line": 3
    },
    {
      "chunk_type": "TypeAlias",
      "comment_ranges": [],
      "content": "type Status = 'pending' | 'completed' | 'failed';",
      "end_line": 10,
      "language": "typescript",
      "name": "Status",
      "original_indentation": 0,
      "start_line": 10
    },
    {
      "chunk_type": "Enum",
      "comment_ranges": [],
      "content": "enum Color {\n    Red = '#ff0000',\n    Green = '#00ff00',\n    Blue = '#0000ff'\n}",
      "end_line": 17,
      "language": "typescript",
      "name": "Color",
      "original_indentation": 0,
      "start_line": 13
    },
    {
      "chunk_type": "Module",
      "comment_ranges": [],
      "content": "namespace Utils {\n    export function formatDate(date: Date): string {\n        return date.toISOString();\n    }\n}",
      "end_line": 24,
      "language": "typescript",
      "name": "Utils",
      "original_indentation": 0,
      "start_line": 20
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "    export function formatDate",
      "end_line": 21,
      "language": "typescript",
      "name": "name",
      "original_indentation": 20,
      "start_line": 21
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    export function formatDate(date: Date): string {\n        return date.toISOString();\n    }",
      "end_line": 23,
      "language": "typescript",
      "name": "formatDate",
      "original_indentation": 11,
      "start_line": 21
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "class UserService",
      "end_line": 27,
      "language": "typescript",
      "name": "name",
      "original_indentation": 6,
      "start_line": 27
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "class UserService {\n    private users: User[] = [];\n\n    addUser(user: User): void {\n        this.users.push(user);\n    }\n\n    getUserById(id: number): User | undefined {\n        return this.users.find(u => u.id === id);\n    }\n}",
      "end_line": 37,
      "language": "typescript",
      "name": "UserService",
      "original_indentation": 0,
      "start_line": 27
    },
    {
      "chunk_type": "Method",
      "comment_ranges": [],
      "content": "    addUser(user: User): void {\n        this.users.push(user);\n    }",
      "end_line": 32,
      "language": "typescript",
      "name": "addUser",
      "original_indentation": 4,
      "start_line": 30
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "    getUserById",
      "end_line": 34,
      "language": "typescript",
      "name": "name",
      "original_indentation": 4,
      "start_line": 34
    },
    {
      "chunk_type": "Method",
      "comment_ranges": [],
      "content": "    getUserById(id: number): User | undefined {\n        return this.users.find(u => u.id === id);\n    }",
      "end_line": 36,
      "language": "typescript",
      "name": "getUserById",
      "original_indentation": 4,
      "start_line": 34
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "function processUser",
      "end_line": 39,
      "language": "typescript",
      "name": "name",
      "original_indentation": 9,
      "start_line": 39
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "function processUser(user: User): Status {\n    return 'pending';\n}",
      "end_line": 41,
      "language": "typescript",
      "name": "processUser",
      "original_indentation": 0,
      "start_line": 39
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "const calculateTotal = (items: number[]): number => {\n    return items.reduce((sum, item) => sum + item, 0);\n}",
      "end_line": 45,
      "language": "typescript",
      "name": "calculateTotal",
      "original_indentation": 6,
      "start_line": 43
    }
  ],
  "source_code": "\n// Interface declaration\ninterface User {\n    id: number;\n    name: string;\n    email?: string;\n}\n\n// Type alias\ntype Status = 'pending' | 'completed' | 'failed';\n\n// Enum declaration\nenum Color {\n    Red = '#ff0000',\n    Green = '#00ff00',\n    Blue = '#0000ff'\n}\n\n// Namespace declaration\nnamespace Utils {\n    export function formatDate(date: Date): string {\n        return date.toISOString();\n    }\n}\n\n// Existing constructs (should still work)\nclass UserService {\n    private users: User[] = [];\n\n    addUser(user: User): void {\n        this.users.push(user);\n    }\n\n    getUserById(id: number): User | undefined {\n        return this.users.find(u => u.id === id);\n    }\n}\n\nfunction processUser(user: User): Status {\n    return 'pending';\n}\n\nconst calculateTotal = (items: number[]): number => {\n    return items.reduce((sum, item) => sum + item, 0);\n};\n",
  "test_name": "test_typescript_all_new_constructs_combined",
  "total_chunks": 15
}
