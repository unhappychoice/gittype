---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [
        [
          147,
          169
        ],
        [
          215,
          282
        ],
        [
          429,
          452
        ],
        [
          929,
          947
        ],
        [
          1354,
          1408
        ],
        [
          1600,
          1611
        ],
        [
          1788,
          1807
        ]
      ],
      "content": "\ndef complex_algorithm(data, threshold=10):\n    \"\"\"Complex function with middle implementation segments\"\"\"\n    if not data:\n        return []\n\n    # Initialize variables\n    result = []\n    processed_count = 0\n\n    # Main processing loop - this should be extractable as middle chunk\n    for item in data:\n        if isinstance(item, dict):\n            value = item.get('value', 0)\n        else:\n            value = item\n\n        # Apply transformations\n        if value > threshold:\n            transformed = value * 2\n            result.append({\n                'original': value,\n                'transformed': transformed,\n                'ratio': transformed / value\n            })\n            processed_count += 1\n        elif value > 0:\n            result.append({\n                'original': value,\n                'transformed': value + threshold,\n                'ratio': (value + threshold) / value\n            })\n\n    # Final processing\n    if processed_count > 0:\n        avg_ratio = sum(item['ratio'] for item in result) / len(result)\n        for item in result:\n            item['normalized_ratio'] = item['ratio'] / avg_ratio\n\n    return result\n\ndef data_processor(input_data):\n    \"\"\"Function with complex logic patterns\"\"\"\n    cache = {}\n    results = []\n\n    for idx, item in enumerate(input_data):\n        key = f\"item_{idx}\"\n\n        # Complex conditional logic - extractable middle chunk\n        if key in cache:\n            cached_result = cache[key]\n            if cached_result['valid']:\n                results.append(cached_result['data'])\n            else:\n                # Recompute\n                new_result = item * 2 + 1\n                cache[key] = {'data': new_result, 'valid': True}\n                results.append(new_result)\n        else:\n            # First computation\n            computed = item ** 2 if item > 5 else item * 3\n            cache[key] = {'data': computed, 'valid': True}\n            results.append(computed)\n\n    return results\n",
      "end_line": 66,
      "language": "python",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "def complex_algorithm",
      "end_line": 2,
      "language": "python",
      "name": "name",
      "original_indentation": 4,
      "start_line": 2
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [
        [
          146,
          168
        ],
        [
          214,
          281
        ],
        [
          428,
          451
        ],
        [
          928,
          946
        ]
      ],
      "content": "def complex_algorithm(data, threshold=10):\n    \"\"\"Complex function with middle implementation segments\"\"\"\n    if not data:\n        return []\n\n    # Initialize variables\n    result = []\n    processed_count = 0\n\n    # Main processing loop - this should be extractable as middle chunk\n    for item in data:\n        if isinstance(item, dict):\n            value = item.get('value', 0)\n        else:\n            value = item\n\n        # Apply transformations\n        if value > threshold:\n            transformed = value * 2\n            result.append({\n                'original': value,\n                'transformed': transformed,\n                'ratio': transformed / value\n            })\n            processed_count += 1\n        elif value > 0:\n            result.append({\n                'original': value,\n                'transformed': value + threshold,\n                'ratio': (value + threshold) / value\n            })\n\n    # Final processing\n    if processed_count > 0:\n        avg_ratio = sum(item['ratio'] for item in result) / len(result)\n        for item in result:\n            item['normalized_ratio'] = item['ratio'] / avg_ratio\n\n    return result",
      "end_line": 40,
      "language": "python",
      "name": "function",
      "original_indentation": 0,
      "start_line": 2
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "    if not data:\n        return []",
      "end_line": 5,
      "language": "python",
      "name": "if_block",
      "original_indentation": 4,
      "start_line": 4
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [],
      "content": "    for item in data:\n        if isinstance(item, dict):\n            value = item.get('value', 0)\n        else:\n            value = item\n\n        # Apply transformations\n        if value > threshold:\n            transformed = value * 2\n            result.append({\n                'original': value,\n                'transformed': transformed,\n                'ratio': transformed / value\n            })\n            processed_count += 1\n        elif value > 0:\n            result.append({\n                'original': value,\n                'transformed': value + threshold,\n                'ratio': (value + threshold) / value\n            })",
      "end_line": 32,
      "language": "python",
      "name": "for_loop",
      "original_indentation": 4,
      "start_line": 12
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if isinstance(item, dict):\n            value = item.get('value', 0)\n        else:\n            value = item",
      "end_line": 16,
      "language": "python",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 13
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if value > threshold:\n            transformed = value * 2\n            result.append({\n                'original': value,\n                'transformed': transformed,\n                'ratio': transformed / value\n            })\n            processed_count += 1\n        elif value > 0:\n            result.append({\n                'original': value,\n                'transformed': value + threshold,\n                'ratio': (value + threshold) / value\n            })",
      "end_line": 32,
      "language": "python",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 19
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "            result.append({\n                'original': value,\n                'transformed': transformed,\n                'ratio': transformed / value\n            })",
      "end_line": 25,
      "language": "python",
      "name": "function_call",
      "original_indentation": 12,
      "start_line": 21
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "            result.append({\n                'original': value,\n                'transformed': value + threshold,\n                'ratio': (value + threshold) / value\n            })",
      "end_line": 32,
      "language": "python",
      "name": "function_call",
      "original_indentation": 12,
      "start_line": 28
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "    if processed_count > 0:\n        avg_ratio = sum(item['ratio'] for item in result) / len(result)\n        for item in result:\n            item['normalized_ratio'] = item['ratio'] / avg_ratio",
      "end_line": 38,
      "language": "python",
      "name": "if_block",
      "original_indentation": 4,
      "start_line": 35
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [],
      "content": "        for item in result:\n            item['normalized_ratio'] = item['ratio'] / avg_ratio",
      "end_line": 38,
      "language": "python",
      "name": "for_loop",
      "original_indentation": 8,
      "start_line": 37
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "def data_processor",
      "end_line": 42,
      "language": "python",
      "name": "name",
      "original_indentation": 4,
      "start_line": 42
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [
        [
          193,
          247
        ],
        [
          439,
          450
        ],
        [
          627,
          646
        ]
      ],
      "content": "def data_processor(input_data):\n    \"\"\"Function with complex logic patterns\"\"\"\n    cache = {}\n    results = []\n\n    for idx, item in enumerate(input_data):\n        key = f\"item_{idx}\"\n\n        # Complex conditional logic - extractable middle chunk\n        if key in cache:\n            cached_result = cache[key]\n            if cached_result['valid']:\n                results.append(cached_result['data'])\n            else:\n                # Recompute\n                new_result = item * 2 + 1\n                cache[key] = {'data': new_result, 'valid': True}\n                results.append(new_result)\n        else:\n            # First computation\n            computed = item ** 2 if item > 5 else item * 3\n            cache[key] = {'data': computed, 'valid': True}\n            results.append(computed)\n\n    return results",
      "end_line": 66,
      "language": "python",
      "name": "function",
      "original_indentation": 0,
      "start_line": 42
    },
    {
      "chunk_type": "Loop",
      "comment_ranges": [],
      "content": "    for idx, item in enumerate(input_data):\n        key = f\"item_{idx}\"\n\n        # Complex conditional logic - extractable middle chunk\n        if key in cache:\n            cached_result = cache[key]\n            if cached_result['valid']:\n                results.append(cached_result['data'])\n            else:\n                # Recompute\n                new_result = item * 2 + 1\n                cache[key] = {'data': new_result, 'valid': True}\n                results.append(new_result)\n        else:\n            # First computation\n            computed = item ** 2 if item > 5 else item * 3\n            cache[key] = {'data': computed, 'valid': True}\n            results.append(computed)",
      "end_line": 64,
      "language": "python",
      "name": "for_loop",
      "original_indentation": 4,
      "start_line": 47
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if key in cache:\n            cached_result = cache[key]\n            if cached_result['valid']:\n                results.append(cached_result['data'])\n            else:\n                # Recompute\n                new_result = item * 2 + 1\n                cache[key] = {'data': new_result, 'valid': True}\n                results.append(new_result)\n        else:\n            # First computation\n            computed = item ** 2 if item > 5 else item * 3\n            cache[key] = {'data': computed, 'valid': True}\n            results.append(computed)",
      "end_line": 64,
      "language": "python",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 51
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "            if cached_result['valid']:\n                results.append(cached_result['data'])\n            else:\n                # Recompute\n                new_result = item * 2 + 1\n                cache[key] = {'data': new_result, 'valid': True}\n                results.append(new_result)",
      "end_line": 59,
      "language": "python",
      "name": "if_block",
      "original_indentation": 12,
      "start_line": 53
    }
  ],
  "source_code": "\ndef complex_algorithm(data, threshold=10):\n    \"\"\"Complex function with middle implementation segments\"\"\"\n    if not data:\n        return []\n\n    # Initialize variables\n    result = []\n    processed_count = 0\n\n    # Main processing loop - this should be extractable as middle chunk\n    for item in data:\n        if isinstance(item, dict):\n            value = item.get('value', 0)\n        else:\n            value = item\n\n        # Apply transformations\n        if value > threshold:\n            transformed = value * 2\n            result.append({\n                'original': value,\n                'transformed': transformed,\n                'ratio': transformed / value\n            })\n            processed_count += 1\n        elif value > 0:\n            result.append({\n                'original': value,\n                'transformed': value + threshold,\n                'ratio': (value + threshold) / value\n            })\n\n    # Final processing\n    if processed_count > 0:\n        avg_ratio = sum(item['ratio'] for item in result) / len(result)\n        for item in result:\n            item['normalized_ratio'] = item['ratio'] / avg_ratio\n\n    return result\n\ndef data_processor(input_data):\n    \"\"\"Function with complex logic patterns\"\"\"\n    cache = {}\n    results = []\n\n    for idx, item in enumerate(input_data):\n        key = f\"item_{idx}\"\n\n        # Complex conditional logic - extractable middle chunk\n        if key in cache:\n            cached_result = cache[key]\n            if cached_result['valid']:\n                results.append(cached_result['data'])\n            else:\n                # Recompute\n                new_result = item * 2 + 1\n                cache[key] = {'data': new_result, 'valid': True}\n                results.append(new_result)\n        else:\n            # First computation\n            computed = item ** 2 if item > 5 else item * 3\n            cache[key] = {'data': computed, 'valid': True}\n            results.append(computed)\n\n    return results\n",
  "test_name": "test_python_function_extraction_new",
  "total_chunks": 16
}
