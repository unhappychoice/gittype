---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [
        [
          582,
          637
        ],
        [
          2204,
          2227
        ],
        [
          2390,
          2411
        ],
        [
          2965,
          3017
        ],
        [
          3523,
          3545
        ],
        [
          3693,
          3707
        ],
        [
          3957,
          3979
        ]
      ],
      "content": "\ndata class ProcessedItem(\n    val id: Int,\n    val originalValue: Int,\n    val transformedValue: Int,\n    val category: String,\n    val timestamp: Long = System.currentTimeMillis(),\n    val metadata: MutableMap<String, Any> = mutableMapOf()\n)\n\nclass DataProcessor(private val threshold: Int) {\n    private val cache = mutableMapOf<String, ProcessedItem>()\n    private val processingLog = mutableListOf<ProcessedItem>()\n\n    fun processComplexData(input: List<Int>): List<ProcessedItem> {\n        val results = mutableListOf<ProcessedItem>()\n        var processedCount = 0\n\n        // Main processing algorithm - extractable middle chunk\n        input.forEachIndexed { index, value ->\n            val cacheKey = \"item_${index}_$value\"\n\n            cache[cacheKey]?.let { cachedItem ->\n                results.add(cachedItem)\n                return@forEachIndexed\n            }\n\n            val processedItem = when {\n                value > threshold -> {\n                    val transformedValue = value * 2\n                    val category = if (transformedValue > threshold * 3) \"HIGH\" else \"MEDIUM\"\n                    val bonusValue = if (transformedValue > 100) transformedValue + 10 else transformedValue\n\n                    ProcessedItem(\n                        id = index,\n                        originalValue = value,\n                        transformedValue = bonusValue,\n                        category = category,\n                        metadata = mutableMapOf(\n                            \"processed\" to true,\n                            \"multiplier\" to 2,\n                            \"processor\" to \"enhanced\"\n                        )\n                    ).also { processedCount++ }\n                }\n                value > 0 -> ProcessedItem(\n                    id = index,\n                    originalValue = value,\n                    transformedValue = value + threshold,\n                    category = \"LOW\",\n                    metadata = mutableMapOf(\n                        \"processed\" to true,\n                        \"adjusted\" to true,\n                        \"processor\" to \"basic\"\n                    )\n                )\n                else -> return@forEachIndexed // skip negative values\n            }\n\n            cache[cacheKey] = processedItem\n            processingLog.add(processedItem)\n            results.add(processedItem)\n        }\n\n        // Finalization logic\n        if (processedCount > 0) {\n            val average = results.map { it.transformedValue }.average()\n            println(\"Processing complete. Average: %.2f\".format(average))\n\n            results.forEach { item ->\n                item.metadata[\"processing_average\"] = average\n            }\n        }\n\n        return results\n    }\n\n    fun analyzePatterns(items: List<ProcessedItem>): Map<String, Map<String, Any>> {\n        val analysis = mutableMapOf<String, Map<String, Any>>()\n        val categoryGroups = items.groupBy { it.category }\n\n        // Pattern analysis logic - extractable middle chunk\n        categoryGroups.forEach { (category, categoryItems) ->\n            val values = categoryItems.map { it.transformedValue.toDouble() }\n            val categoryAnalysis = mapOf(\n                \"count\" to categoryItems.size,\n                \"percentage\" to (categoryItems.size.toDouble() / items.size * 100),\n                \"avg_value\" to values.average(),\n                \"min_value\" to values.minOrNull(),\n                \"max_value\" to values.maxOrNull()\n            ).toMutableMap()\n\n            // Time-based analysis\n            val currentTime = System.currentTimeMillis()\n            val recentItems = categoryItems.filter { currentTime - it.timestamp < 60000 } // last minute\n            if (recentItems.isNotEmpty()) {\n                categoryAnalysis[\"recent_count\"] = recentItems.size\n                categoryAnalysis[\"recent_avg\"] = recentItems.map { it.transformedValue.toDouble() }.average()\n            }\n\n            // High-value analysis\n            val highValueItems = categoryItems.filter { it.transformedValue > 1000 }\n            if (highValueItems.isNotEmpty()) {\n                categoryAnalysis[\"high_value_count\"] = highValueItems.size\n            }\n\n            analysis[category] = categoryAnalysis\n        }\n\n        return analysis + mapOf(\n            \"total_items\" to items.size,\n            \"processing_time\" to System.currentTimeMillis()\n        )\n    }\n}\n",
      "end_line": 115,
      "language": "kotlin",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "data class ProcessedItem(\n    val id: Int,\n    val originalValue: Int,\n    val transformedValue: Int,\n    val category: String,\n    val timestamp: Long = System.currentTimeMillis(),\n    val metadata: MutableMap<String, Any> = mutableMapOf()\n)",
      "end_line": 9,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 2
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [
        [
          337,
          392
        ],
        [
          1959,
          1982
        ],
        [
          2145,
          2166
        ],
        [
          2720,
          2772
        ],
        [
          3278,
          3300
        ],
        [
          3448,
          3462
        ],
        [
          3712,
          3734
        ]
      ],
      "content": "class DataProcessor(private val threshold: Int) {\n    private val cache = mutableMapOf<String, ProcessedItem>()\n    private val processingLog = mutableListOf<ProcessedItem>()\n\n    fun processComplexData(input: List<Int>): List<ProcessedItem> {\n        val results = mutableListOf<ProcessedItem>()\n        var processedCount = 0\n\n        // Main processing algorithm - extractable middle chunk\n        input.forEachIndexed { index, value ->\n            val cacheKey = \"item_${index}_$value\"\n\n            cache[cacheKey]?.let { cachedItem ->\n                results.add(cachedItem)\n                return@forEachIndexed\n            }\n\n            val processedItem = when {\n                value > threshold -> {\n                    val transformedValue = value * 2\n                    val category = if (transformedValue > threshold * 3) \"HIGH\" else \"MEDIUM\"\n                    val bonusValue = if (transformedValue > 100) transformedValue + 10 else transformedValue\n\n                    ProcessedItem(\n                        id = index,\n                        originalValue = value,\n                        transformedValue = bonusValue,\n                        category = category,\n                        metadata = mutableMapOf(\n                            \"processed\" to true,\n                            \"multiplier\" to 2,\n                            \"processor\" to \"enhanced\"\n                        )\n                    ).also { processedCount++ }\n                }\n                value > 0 -> ProcessedItem(\n                    id = index,\n                    originalValue = value,\n                    transformedValue = value + threshold,\n                    category = \"LOW\",\n                    metadata = mutableMapOf(\n                        \"processed\" to true,\n                        \"adjusted\" to true,\n                        \"processor\" to \"basic\"\n                    )\n                )\n                else -> return@forEachIndexed // skip negative values\n            }\n\n            cache[cacheKey] = processedItem\n            processingLog.add(processedItem)\n            results.add(processedItem)\n        }\n\n        // Finalization logic\n        if (processedCount > 0) {\n            val average = results.map { it.transformedValue }.average()\n            println(\"Processing complete. Average: %.2f\".format(average))\n\n            results.forEach { item ->\n                item.metadata[\"processing_average\"] = average\n            }\n        }\n\n        return results\n    }\n\n    fun analyzePatterns(items: List<ProcessedItem>): Map<String, Map<String, Any>> {\n        val analysis = mutableMapOf<String, Map<String, Any>>()\n        val categoryGroups = items.groupBy { it.category }\n\n        // Pattern analysis logic - extractable middle chunk\n        categoryGroups.forEach { (category, categoryItems) ->\n            val values = categoryItems.map { it.transformedValue.toDouble() }\n            val categoryAnalysis = mapOf(\n                \"count\" to categoryItems.size,\n                \"percentage\" to (categoryItems.size.toDouble() / items.size * 100),\n                \"avg_value\" to values.average(),\n                \"min_value\" to values.minOrNull(),\n                \"max_value\" to values.maxOrNull()\n            ).toMutableMap()\n\n            // Time-based analysis\n            val currentTime = System.currentTimeMillis()\n            val recentItems = categoryItems.filter { currentTime - it.timestamp < 60000 } // last minute\n            if (recentItems.isNotEmpty()) {\n                categoryAnalysis[\"recent_count\"] = recentItems.size\n                categoryAnalysis[\"recent_avg\"] = recentItems.map { it.transformedValue.toDouble() }.average()\n            }\n\n            // High-value analysis\n            val highValueItems = categoryItems.filter { it.transformedValue > 1000 }\n            if (highValueItems.isNotEmpty()) {\n                categoryAnalysis[\"high_value_count\"] = highValueItems.size\n            }\n\n            analysis[category] = categoryAnalysis\n        }\n\n        return analysis + mapOf(\n            \"total_items\" to items.size,\n            \"processing_time\" to System.currentTimeMillis()\n        )\n    }\n}",
      "end_line": 115,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 11
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "    private val cache = mutableMapOf<String, ProcessedItem>()",
      "end_line": 12,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 4,
      "start_line": 12
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "    private val processingLog = mutableListOf<ProcessedItem>()",
      "end_line": 13,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 4,
      "start_line": 13
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [
        [
          161,
          216
        ],
        [
          1783,
          1806
        ],
        [
          1969,
          1990
        ]
      ],
      "content": "    fun processComplexData(input: List<Int>): List<ProcessedItem> {\n        val results = mutableListOf<ProcessedItem>()\n        var processedCount = 0\n\n        // Main processing algorithm - extractable middle chunk\n        input.forEachIndexed { index, value ->\n            val cacheKey = \"item_${index}_$value\"\n\n            cache[cacheKey]?.let { cachedItem ->\n                results.add(cachedItem)\n                return@forEachIndexed\n            }\n\n            val processedItem = when {\n                value > threshold -> {\n                    val transformedValue = value * 2\n                    val category = if (transformedValue > threshold * 3) \"HIGH\" else \"MEDIUM\"\n                    val bonusValue = if (transformedValue > 100) transformedValue + 10 else transformedValue\n\n                    ProcessedItem(\n                        id = index,\n                        originalValue = value,\n                        transformedValue = bonusValue,\n                        category = category,\n                        metadata = mutableMapOf(\n                            \"processed\" to true,\n                            \"multiplier\" to 2,\n                            \"processor\" to \"enhanced\"\n                        )\n                    ).also { processedCount++ }\n                }\n                value > 0 -> ProcessedItem(\n                    id = index,\n                    originalValue = value,\n                    transformedValue = value + threshold,\n                    category = \"LOW\",\n                    metadata = mutableMapOf(\n                        \"processed\" to true,\n                        \"adjusted\" to true,\n                        \"processor\" to \"basic\"\n                    )\n                )\n                else -> return@forEachIndexed // skip negative values\n            }\n\n            cache[cacheKey] = processedItem\n            processingLog.add(processedItem)\n            results.add(processedItem)\n        }\n\n        // Finalization logic\n        if (processedCount > 0) {\n            val average = results.map { it.transformedValue }.average()\n            println(\"Processing complete. Average: %.2f\".format(average))\n\n            results.forEach { item ->\n                item.metadata[\"processing_average\"] = average\n            }\n        }\n\n        return results\n    }",
      "end_line": 76,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 4,
      "start_line": 15
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "        val results = mutableListOf<ProcessedItem>()",
      "end_line": 16,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 8,
      "start_line": 16
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "        var processedCount = 0",
      "end_line": 17,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 8,
      "start_line": 17
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [
        [
          1566,
          1589
        ]
      ],
      "content": "        input.forEachIndexed { index, value ->\n            val cacheKey = \"item_${index}_$value\"\n\n            cache[cacheKey]?.let { cachedItem ->\n                results.add(cachedItem)\n                return@forEachIndexed\n            }\n\n            val processedItem = when {\n                value > threshold -> {\n                    val transformedValue = value * 2\n                    val category = if (transformedValue > threshold * 3) \"HIGH\" else \"MEDIUM\"\n                    val bonusValue = if (transformedValue > 100) transformedValue + 10 else transformedValue\n\n                    ProcessedItem(\n                        id = index,\n                        originalValue = value,\n                        transformedValue = bonusValue,\n                        category = category,\n                        metadata = mutableMapOf(\n                            \"processed\" to true,\n                            \"multiplier\" to 2,\n                            \"processor\" to \"enhanced\"\n                        )\n                    ).also { processedCount++ }\n                }\n                value > 0 -> ProcessedItem(\n                    id = index,\n                    originalValue = value,\n                    transformedValue = value + threshold,\n                    category = \"LOW\",\n                    metadata = mutableMapOf(\n                        \"processed\" to true,\n                        \"adjusted\" to true,\n                        \"processor\" to \"basic\"\n                    )\n                )\n                else -> return@forEachIndexed // skip negative values\n            }\n\n            cache[cacheKey] = processedItem\n            processingLog.add(processedItem)\n            results.add(processedItem)\n        }",
      "end_line": 63,
      "language": "kotlin",
      "name": "function_call",
      "original_indentation": 8,
      "start_line": 20
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "            val cacheKey = \"item_${index}_$value\"",
      "end_line": 21,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 12,
      "start_line": 21
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "            cache[cacheKey]?.let { cachedItem ->\n                results.add(cachedItem)\n                return@forEachIndexed\n            }",
      "end_line": 26,
      "language": "kotlin",
      "name": "function_call",
      "original_indentation": 12,
      "start_line": 23
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [
        [
          1326,
          1349
        ]
      ],
      "content": "            val processedItem = when {\n                value > threshold -> {\n                    val transformedValue = value * 2\n                    val category = if (transformedValue > threshold * 3) \"HIGH\" else \"MEDIUM\"\n                    val bonusValue = if (transformedValue > 100) transformedValue + 10 else transformedValue\n\n                    ProcessedItem(\n                        id = index,\n                        originalValue = value,\n                        transformedValue = bonusValue,\n                        category = category,\n                        metadata = mutableMapOf(\n                            \"processed\" to true,\n                            \"multiplier\" to 2,\n                            \"processor\" to \"enhanced\"\n                        )\n                    ).also { processedCount++ }\n                }\n                value > 0 -> ProcessedItem(\n                    id = index,\n                    originalValue = value,\n                    transformedValue = value + threshold,\n                    category = \"LOW\",\n                    metadata = mutableMapOf(\n                        \"processed\" to true,\n                        \"adjusted\" to true,\n                        \"processor\" to \"basic\"\n                    )\n                )\n                else -> return@forEachIndexed // skip negative values\n            }",
      "end_line": 58,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 12,
      "start_line": 28
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "                    val transformedValue = value * 2",
      "end_line": 30,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 20,
      "start_line": 30
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "                    val category = if (transformedValue > threshold * 3) \"HIGH\" else \"MEDIUM\"",
      "end_line": 31,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 20,
      "start_line": 31
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "                    val bonusValue = if (transformedValue > 100) transformedValue + 10 else transformedValue",
      "end_line": 32,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 20,
      "start_line": 32
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "                    ProcessedItem(\n                        id = index,\n                        originalValue = value,\n                        transformedValue = bonusValue,\n                        category = category,\n                        metadata = mutableMapOf(\n                            \"processed\" to true,\n                            \"multiplier\" to 2,\n                            \"processor\" to \"enhanced\"\n                        )\n                    ).also { processedCount++ }",
      "end_line": 44,
      "language": "kotlin",
      "name": "function_call",
      "original_indentation": 20,
      "start_line": 34
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "                        metadata = mutableMapOf(\n                            \"processed\" to true,\n                            \"multiplier\" to 2,\n                            \"processor\" to \"enhanced\"\n                        )",
      "end_line": 43,
      "language": "kotlin",
      "name": "function_call",
      "original_indentation": 35,
      "start_line": 39
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "                value > 0 -> ProcessedItem(\n                    id = index,\n                    originalValue = value,\n                    transformedValue = value + threshold,\n                    category = \"LOW\",\n                    metadata = mutableMapOf(\n                        \"processed\" to true,\n                        \"adjusted\" to true,\n                        \"processor\" to \"basic\"\n                    )\n                )",
      "end_line": 56,
      "language": "kotlin",
      "name": "function_call",
      "original_indentation": 29,
      "start_line": 46
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "                    metadata = mutableMapOf(\n                        \"processed\" to true,\n                        \"adjusted\" to true,\n                        \"processor\" to \"basic\"\n                    )",
      "end_line": 55,
      "language": "kotlin",
      "name": "function_call",
      "original_indentation": 31,
      "start_line": 51
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "        if (processedCount > 0) {\n            val average = results.map { it.transformedValue }.average()\n            println(\"Processing complete. Average: %.2f\".format(average))\n\n            results.forEach { item ->\n                item.metadata[\"processing_average\"] = average\n            }\n        }",
      "end_line": 73,
      "language": "kotlin",
      "name": "if_block",
      "original_indentation": 8,
      "start_line": 66
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "            val average = results.map { it.transformedValue }.average()",
      "end_line": 67,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 12,
      "start_line": 67
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "            results.forEach { item ->\n                item.metadata[\"processing_average\"] = average\n            }",
      "end_line": 72,
      "language": "kotlin",
      "name": "function_call",
      "original_indentation": 12,
      "start_line": 70
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [
        [
          217,
          269
        ],
        [
          775,
          797
        ],
        [
          945,
          959
        ],
        [
          1209,
          1231
        ]
      ],
      "content": "    fun analyzePatterns(items: List<ProcessedItem>): Map<String, Map<String, Any>> {\n        val analysis = mutableMapOf<String, Map<String, Any>>()\n        val categoryGroups = items.groupBy { it.category }\n\n        // Pattern analysis logic - extractable middle chunk\n        categoryGroups.forEach { (category, categoryItems) ->\n            val values = categoryItems.map { it.transformedValue.toDouble() }\n            val categoryAnalysis = mapOf(\n                \"count\" to categoryItems.size,\n                \"percentage\" to (categoryItems.size.toDouble() / items.size * 100),\n                \"avg_value\" to values.average(),\n                \"min_value\" to values.minOrNull(),\n                \"max_value\" to values.maxOrNull()\n            ).toMutableMap()\n\n            // Time-based analysis\n            val currentTime = System.currentTimeMillis()\n            val recentItems = categoryItems.filter { currentTime - it.timestamp < 60000 } // last minute\n            if (recentItems.isNotEmpty()) {\n                categoryAnalysis[\"recent_count\"] = recentItems.size\n                categoryAnalysis[\"recent_avg\"] = recentItems.map { it.transformedValue.toDouble() }.average()\n            }\n\n            // High-value analysis\n            val highValueItems = categoryItems.filter { it.transformedValue > 1000 }\n            if (highValueItems.isNotEmpty()) {\n                categoryAnalysis[\"high_value_count\"] = highValueItems.size\n            }\n\n            analysis[category] = categoryAnalysis\n        }\n\n        return analysis + mapOf(\n            \"total_items\" to items.size,\n            \"processing_time\" to System.currentTimeMillis()\n        )\n    }",
      "end_line": 114,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 4,
      "start_line": 78
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "        val analysis = mutableMapOf<String, Map<String, Any>>()",
      "end_line": 79,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 8,
      "start_line": 79
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "        val categoryGroups = items.groupBy { it.category }",
      "end_line": 80,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 8,
      "start_line": 80
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [
        [
          505,
          527
        ],
        [
          675,
          689
        ],
        [
          939,
          961
        ]
      ],
      "content": "        categoryGroups.forEach { (category, categoryItems) ->\n            val values = categoryItems.map { it.transformedValue.toDouble() }\n            val categoryAnalysis = mapOf(\n                \"count\" to categoryItems.size,\n                \"percentage\" to (categoryItems.size.toDouble() / items.size * 100),\n                \"avg_value\" to values.average(),\n                \"min_value\" to values.minOrNull(),\n                \"max_value\" to values.maxOrNull()\n            ).toMutableMap()\n\n            // Time-based analysis\n            val currentTime = System.currentTimeMillis()\n            val recentItems = categoryItems.filter { currentTime - it.timestamp < 60000 } // last minute\n            if (recentItems.isNotEmpty()) {\n                categoryAnalysis[\"recent_count\"] = recentItems.size\n                categoryAnalysis[\"recent_avg\"] = recentItems.map { it.transformedValue.toDouble() }.average()\n            }\n\n            // High-value analysis\n            val highValueItems = categoryItems.filter { it.transformedValue > 1000 }\n            if (highValueItems.isNotEmpty()) {\n                categoryAnalysis[\"high_value_count\"] = highValueItems.size\n            }\n\n            analysis[category] = categoryAnalysis\n        }",
      "end_line": 108,
      "language": "kotlin",
      "name": "function_call",
      "original_indentation": 8,
      "start_line": 83
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "            val values = categoryItems.map { it.transformedValue.toDouble() }",
      "end_line": 84,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 12,
      "start_line": 84
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "            val categoryAnalysis = mapOf(\n                \"count\" to categoryItems.size,\n                \"percentage\" to (categoryItems.size.toDouble() / items.size * 100),\n                \"avg_value\" to values.average(),\n                \"min_value\" to values.minOrNull(),\n                \"max_value\" to values.maxOrNull()\n            ).toMutableMap()",
      "end_line": 91,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 12,
      "start_line": 85
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "            val currentTime = System.currentTimeMillis()",
      "end_line": 94,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 12,
      "start_line": 94
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "            val recentItems = categoryItems.filter { currentTime - it.timestamp < 60000 }",
      "end_line": 95,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 12,
      "start_line": 95
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "            if (recentItems.isNotEmpty()) {\n                categoryAnalysis[\"recent_count\"] = recentItems.size\n                categoryAnalysis[\"recent_avg\"] = recentItems.map { it.transformedValue.toDouble() }.average()\n            }",
      "end_line": 99,
      "language": "kotlin",
      "name": "if_block",
      "original_indentation": 12,
      "start_line": 96
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "            val highValueItems = categoryItems.filter { it.transformedValue > 1000 }",
      "end_line": 102,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 12,
      "start_line": 102
    },
    {
      "chunk_type": "Conditional",
      "comment_ranges": [],
      "content": "            if (highValueItems.isNotEmpty()) {\n                categoryAnalysis[\"high_value_count\"] = highValueItems.size\n            }",
      "end_line": 105,
      "language": "kotlin",
      "name": "if_block",
      "original_indentation": 12,
      "start_line": 103
    },
    {
      "chunk_type": "FunctionCall",
      "comment_ranges": [],
      "content": "        return analysis + mapOf(\n            \"total_items\" to items.size,\n            \"processing_time\" to System.currentTimeMillis()\n        )",
      "end_line": 113,
      "language": "kotlin",
      "name": "function_call",
      "original_indentation": 26,
      "start_line": 110
    }
  ],
  "source_code": "\ndata class ProcessedItem(\n    val id: Int,\n    val originalValue: Int,\n    val transformedValue: Int,\n    val category: String,\n    val timestamp: Long = System.currentTimeMillis(),\n    val metadata: MutableMap<String, Any> = mutableMapOf()\n)\n\nclass DataProcessor(private val threshold: Int) {\n    private val cache = mutableMapOf<String, ProcessedItem>()\n    private val processingLog = mutableListOf<ProcessedItem>()\n\n    fun processComplexData(input: List<Int>): List<ProcessedItem> {\n        val results = mutableListOf<ProcessedItem>()\n        var processedCount = 0\n\n        // Main processing algorithm - extractable middle chunk\n        input.forEachIndexed { index, value ->\n            val cacheKey = \"item_${index}_$value\"\n\n            cache[cacheKey]?.let { cachedItem ->\n                results.add(cachedItem)\n                return@forEachIndexed\n            }\n\n            val processedItem = when {\n                value > threshold -> {\n                    val transformedValue = value * 2\n                    val category = if (transformedValue > threshold * 3) \"HIGH\" else \"MEDIUM\"\n                    val bonusValue = if (transformedValue > 100) transformedValue + 10 else transformedValue\n\n                    ProcessedItem(\n                        id = index,\n                        originalValue = value,\n                        transformedValue = bonusValue,\n                        category = category,\n                        metadata = mutableMapOf(\n                            \"processed\" to true,\n                            \"multiplier\" to 2,\n                            \"processor\" to \"enhanced\"\n                        )\n                    ).also { processedCount++ }\n                }\n                value > 0 -> ProcessedItem(\n                    id = index,\n                    originalValue = value,\n                    transformedValue = value + threshold,\n                    category = \"LOW\",\n                    metadata = mutableMapOf(\n                        \"processed\" to true,\n                        \"adjusted\" to true,\n                        \"processor\" to \"basic\"\n                    )\n                )\n                else -> return@forEachIndexed // skip negative values\n            }\n\n            cache[cacheKey] = processedItem\n            processingLog.add(processedItem)\n            results.add(processedItem)\n        }\n\n        // Finalization logic\n        if (processedCount > 0) {\n            val average = results.map { it.transformedValue }.average()\n            println(\"Processing complete. Average: %.2f\".format(average))\n\n            results.forEach { item ->\n                item.metadata[\"processing_average\"] = average\n            }\n        }\n\n        return results\n    }\n\n    fun analyzePatterns(items: List<ProcessedItem>): Map<String, Map<String, Any>> {\n        val analysis = mutableMapOf<String, Map<String, Any>>()\n        val categoryGroups = items.groupBy { it.category }\n\n        // Pattern analysis logic - extractable middle chunk\n        categoryGroups.forEach { (category, categoryItems) ->\n            val values = categoryItems.map { it.transformedValue.toDouble() }\n            val categoryAnalysis = mapOf(\n                \"count\" to categoryItems.size,\n                \"percentage\" to (categoryItems.size.toDouble() / items.size * 100),\n                \"avg_value\" to values.average(),\n                \"min_value\" to values.minOrNull(),\n                \"max_value\" to values.maxOrNull()\n            ).toMutableMap()\n\n            // Time-based analysis\n            val currentTime = System.currentTimeMillis()\n            val recentItems = categoryItems.filter { currentTime - it.timestamp < 60000 } // last minute\n            if (recentItems.isNotEmpty()) {\n                categoryAnalysis[\"recent_count\"] = recentItems.size\n                categoryAnalysis[\"recent_avg\"] = recentItems.map { it.transformedValue.toDouble() }.average()\n            }\n\n            // High-value analysis\n            val highValueItems = categoryItems.filter { it.transformedValue > 1000 }\n            if (highValueItems.isNotEmpty()) {\n                categoryAnalysis[\"high_value_count\"] = highValueItems.size\n            }\n\n            analysis[category] = categoryAnalysis\n        }\n\n        return analysis + mapOf(\n            \"total_items\" to items.size,\n            \"processing_time\" to System.currentTimeMillis()\n        )\n    }\n}\n",
  "test_name": "test_kotlin_complex_algorithm_extraction",
  "total_chunks": 34
}
