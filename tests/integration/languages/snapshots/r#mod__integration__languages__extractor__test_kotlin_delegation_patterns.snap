---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [],
      "content": "\ninterface Logger {\n    fun log(message: String)\n}\n\nclass ConsoleLogger : Logger {\n    override fun log(message: String) {\n        println(\"LOG: $message\")\n    }\n}\n\nclass FileLogger(private val filename: String) : Logger {\n    override fun log(message: String) {\n        println(\"Writing to $filename: $message\")\n    }\n}\n\nclass Application(logger: Logger) : Logger by logger {\n    fun start() {\n        log(\"Application started\")\n    }\n\n    fun stop() {\n        log(\"Application stopped\")\n    }\n}\n\nclass LazyValue {\n    val expensiveValue: String by lazy {\n        println(\"Computing expensive value...\")\n        \"Expensive Result\"\n    }\n}\n\nvar observableProperty: String by Delegates.observable(\"initial\") { _, old, new ->\n    println(\"Value changed from $old to $new\")\n}\n",
      "end_line": 37,
      "language": "kotlin",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "interface Logger {\n    fun log(message: String)\n}",
      "end_line": 4,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 2
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    fun log(message: String)",
      "end_line": 3,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 4,
      "start_line": 3
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "class ConsoleLogger : Logger {\n    override fun log(message: String) {\n        println(\"LOG: $message\")\n    }\n}",
      "end_line": 10,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 6
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    override fun log(message: String) {\n        println(\"LOG: $message\")\n    }",
      "end_line": 9,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 4,
      "start_line": 7
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "class FileLogger(private val filename: String) : Logger {\n    override fun log(message: String) {\n        println(\"Writing to $filename: $message\")\n    }\n}",
      "end_line": 16,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 12
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    override fun log(message: String) {\n        println(\"Writing to $filename: $message\")\n    }",
      "end_line": 15,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 4,
      "start_line": 13
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "class Application(logger: Logger) : Logger by logger {\n    fun start() {\n        log(\"Application started\")\n    }\n\n    fun stop() {\n        log(\"Application stopped\")\n    }\n}",
      "end_line": 26,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 18
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    fun start() {\n        log(\"Application started\")\n    }",
      "end_line": 21,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 4,
      "start_line": 19
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    fun stop() {\n        log(\"Application stopped\")\n    }",
      "end_line": 25,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 4,
      "start_line": 23
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "class LazyValue {\n    val expensiveValue: String by lazy {\n        println(\"Computing expensive value...\")\n        \"Expensive Result\"\n    }\n}",
      "end_line": 33,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 28
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "    val expensiveValue: String by lazy {\n        println(\"Computing expensive value...\")\n        \"Expensive Result\"\n    }",
      "end_line": 32,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 4,
      "start_line": 29
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "var observableProperty: String by Delegates.observable(\"initial\") { _, old, new ->\n    println(\"Value changed from $old to $new\")\n}",
      "end_line": 37,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 0,
      "start_line": 35
    }
  ],
  "source_code": "\ninterface Logger {\n    fun log(message: String)\n}\n\nclass ConsoleLogger : Logger {\n    override fun log(message: String) {\n        println(\"LOG: $message\")\n    }\n}\n\nclass FileLogger(private val filename: String) : Logger {\n    override fun log(message: String) {\n        println(\"Writing to $filename: $message\")\n    }\n}\n\nclass Application(logger: Logger) : Logger by logger {\n    fun start() {\n        log(\"Application started\")\n    }\n\n    fun stop() {\n        log(\"Application stopped\")\n    }\n}\n\nclass LazyValue {\n    val expensiveValue: String by lazy {\n        println(\"Computing expensive value...\")\n        \"Expensive Result\"\n    }\n}\n\nvar observableProperty: String by Delegates.observable(\"initial\") { _, old, new ->\n    println(\"Value changed from $old to $new\")\n}\n",
  "test_name": "test_kotlin_delegation_patterns",
  "total_chunks": 13
}
