---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [],
      "content": "\nhead' :: [a] -> a\nhead' [] = error \"Empty list\"\nhead' (x:_) = x\n\nlength' :: [a] -> Int\nlength' [] = 0\nlength' (_:xs) = 1 + length' xs\n\nmap' :: (a -> b) -> [a] -> [b]\nmap' _ [] = []\nmap' f (x:xs) = f x : map' f xs\n",
      "end_line": 12,
      "language": "haskell",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "head' :: [a] -> a",
      "end_line": 2,
      "language": "haskell",
      "name": "head'",
      "original_indentation": 0,
      "start_line": 2
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "head' [] = error \"Empty list\"",
      "end_line": 3,
      "language": "haskell",
      "name": "head'",
      "original_indentation": 0,
      "start_line": 3
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "head' (x:_) = x",
      "end_line": 4,
      "language": "haskell",
      "name": "head'",
      "original_indentation": 0,
      "start_line": 4
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "length' :: [a] -> Int",
      "end_line": 6,
      "language": "haskell",
      "name": "length'",
      "original_indentation": 0,
      "start_line": 6
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "length' [] = 0",
      "end_line": 7,
      "language": "haskell",
      "name": "length'",
      "original_indentation": 0,
      "start_line": 7
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "length' (_:xs) = 1 + length' xs",
      "end_line": 8,
      "language": "haskell",
      "name": "length'",
      "original_indentation": 0,
      "start_line": 8
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "map' :: (a -> b) -> [a] -> [b]",
      "end_line": 10,
      "language": "haskell",
      "name": "map'",
      "original_indentation": 0,
      "start_line": 10
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "map' _ [] = []",
      "end_line": 11,
      "language": "haskell",
      "name": "map'",
      "original_indentation": 0,
      "start_line": 11
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "map' f (x:xs) = f x : map' f xs",
      "end_line": 12,
      "language": "haskell",
      "name": "map'",
      "original_indentation": 0,
      "start_line": 12
    }
  ],
  "source_code": "\nhead' :: [a] -> a\nhead' [] = error \"Empty list\"\nhead' (x:_) = x\n\nlength' :: [a] -> Int\nlength' [] = 0\nlength' (_:xs) = 1 + length' xs\n\nmap' :: (a -> b) -> [a] -> [b]\nmap' _ [] = []\nmap' f (x:xs) = f x : map' f xs\n",
  "test_name": "test_haskell_pattern_matching_extraction",
  "total_chunks": 10
}
