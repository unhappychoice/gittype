---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [],
      "content": "\nnamespace MyApplication.Models\n{\n    public struct Point\n    {\n        public int X { get; set; }\n        public int Y { get; set; }\n\n        public Point(int x, int y)\n        {\n            X = x;\n            Y = y;\n        }\n\n        public double DistanceToOrigin()\n        {\n            return Math.Sqrt(X * X + Y * Y);\n        }\n    }\n\n    public enum UserRole\n    {\n        Guest,\n        User,\n        Moderator,\n        Administrator\n    }\n\n    public enum Status\n    {\n        Active = 1,\n        Inactive = 0,\n        Pending = 2\n    }\n}\n",
      "end_line": 35,
      "language": "csharp",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "namespace MyApplication.Models",
      "end_line": 2,
      "language": "csharp",
      "name": "MyApplication",
      "original_indentation": 10,
      "start_line": 2
    },
    {
      "chunk_type": "Namespace",
      "comment_ranges": [],
      "content": "namespace MyApplication.Models\n{\n    public struct Point\n    {\n        public int X { get; set; }\n        public int Y { get; set; }\n\n        public Point(int x, int y)\n        {\n            X = x;\n            Y = y;\n        }\n\n        public double DistanceToOrigin()\n        {\n            return Math.Sqrt(X * X + Y * Y);\n        }\n    }\n\n    public enum UserRole\n    {\n        Guest,\n        User,\n        Moderator,\n        Administrator\n    }\n\n    public enum Status\n    {\n        Active = 1,\n        Inactive = 0,\n        Pending = 2\n    }\n}",
      "end_line": 35,
      "language": "csharp",
      "name": "MyApplication.Models",
      "original_indentation": 0,
      "start_line": 2
    },
    {
      "chunk_type": "Struct",
      "comment_ranges": [],
      "content": "    public struct Point\n    {\n        public int X { get; set; }\n        public int Y { get; set; }\n\n        public Point(int x, int y)\n        {\n            X = x;\n            Y = y;\n        }\n\n        public double DistanceToOrigin()\n        {\n            return Math.Sqrt(X * X + Y * Y);\n        }\n    }",
      "end_line": 19,
      "language": "csharp",
      "name": "Point",
      "original_indentation": 4,
      "start_line": 4
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "        public int X { get; set; }",
      "end_line": 6,
      "language": "csharp",
      "name": "X",
      "original_indentation": 8,
      "start_line": 6
    },
    {
      "chunk_type": "Variable",
      "comment_ranges": [],
      "content": "        public int Y { get; set; }",
      "end_line": 7,
      "language": "csharp",
      "name": "Y",
      "original_indentation": 8,
      "start_line": 7
    },
    {
      "chunk_type": "Method",
      "comment_ranges": [],
      "content": "        public Point(int x, int y)\n        {\n            X = x;\n            Y = y;\n        }",
      "end_line": 13,
      "language": "csharp",
      "name": "Point",
      "original_indentation": 8,
      "start_line": 9
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        {\n            X = x;\n            Y = y;\n        }",
      "end_line": 13,
      "language": "csharp",
      "name": "code_block",
      "original_indentation": 8,
      "start_line": 10
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        public double DistanceToOrigin",
      "end_line": 15,
      "language": "csharp",
      "name": "name",
      "original_indentation": 22,
      "start_line": 15
    },
    {
      "chunk_type": "Method",
      "comment_ranges": [],
      "content": "        public double DistanceToOrigin()\n        {\n            return Math.Sqrt(X * X + Y * Y);\n        }",
      "end_line": 18,
      "language": "csharp",
      "name": "DistanceToOrigin",
      "original_indentation": 8,
      "start_line": 15
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        {\n            return Math.Sqrt(X * X + Y * Y);\n        }",
      "end_line": 18,
      "language": "csharp",
      "name": "code_block",
      "original_indentation": 8,
      "start_line": 16
    },
    {
      "chunk_type": "Enum",
      "comment_ranges": [],
      "content": "    public enum UserRole\n    {\n        Guest,\n        User,\n        Moderator,\n        Administrator\n    }",
      "end_line": 27,
      "language": "csharp",
      "name": "UserRole",
      "original_indentation": 4,
      "start_line": 21
    },
    {
      "chunk_type": "Enum",
      "comment_ranges": [],
      "content": "    public enum Status\n    {\n        Active = 1,\n        Inactive = 0,\n        Pending = 2\n    }",
      "end_line": 34,
      "language": "csharp",
      "name": "Status",
      "original_indentation": 4,
      "start_line": 29
    }
  ],
  "source_code": "\nnamespace MyApplication.Models\n{\n    public struct Point\n    {\n        public int X { get; set; }\n        public int Y { get; set; }\n\n        public Point(int x, int y)\n        {\n            X = x;\n            Y = y;\n        }\n\n        public double DistanceToOrigin()\n        {\n            return Math.Sqrt(X * X + Y * Y);\n        }\n    }\n\n    public enum UserRole\n    {\n        Guest,\n        User,\n        Moderator,\n        Administrator\n    }\n\n    public enum Status\n    {\n        Active = 1,\n        Inactive = 0,\n        Pending = 2\n    }\n}\n",
  "test_name": "test_csharp_struct_and_enum_extraction",
  "total_chunks": 13
}
