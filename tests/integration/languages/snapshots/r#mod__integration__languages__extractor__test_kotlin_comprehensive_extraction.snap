---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [
        [
          1,
          16
        ],
        [
          64,
          77
        ],
        [
          115,
          139
        ],
        [
          203,
          222
        ],
        [
          297,
          318
        ],
        [
          374,
          390
        ],
        [
          473,
          486
        ],
        [
          540,
          553
        ],
        [
          605,
          626
        ],
        [
          747,
          777
        ],
        [
          957,
          970
        ]
      ],
      "content": "\n// Line comment\n/* Block comment */\n\npackage com.example.test\n\n// Type alias\ntypealias StringList = List<String>\n\n// Interface declaration\ninterface TestInterface {\n    fun interfaceMethod(): String\n}\n\n// Regular function\nfun regularFunction(param: String): String {\n    return \"Hello $param\"\n}\n\n// Anonymous function\nval anonymousFunc = fun(x: Int): Int { return x * 2 }\n\n// Regular class\nclass RegularClass(private val name: String) {\n    fun method(): String = name\n}\n\n// Data class\ndata class DataClass(val id: Int, val name: String)\n\n// Enum class\nenum class Color {\n    RED,\n    GREEN,\n    BLUE\n}\n\n// Object declaration\nobject SingletonObject {\n    const val CONSTANT = \"constant_value\"\n\n    fun objectMethod(): String = \"object method\"\n}\n\n// Class with companion object\nclass ClassWithCompanion {\n    companion object {\n        const val COMPANION_CONSTANT = \"companion_constant\"\n\n        fun companionMethod(): String = \"companion method\"\n    }\n}\n\n// Properties\nval globalVal: String = \"global val\"\nvar globalVar: String = \"global var\"\n",
      "end_line": 56,
      "language": "kotlin",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "typealias StringList = List<String>",
      "end_line": 8,
      "language": "kotlin",
      "name": "type_alias",
      "original_indentation": 0,
      "start_line": 8
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "interface TestInterface {\n    fun interfaceMethod(): String\n}",
      "end_line": 13,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 11
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    fun interfaceMethod(): String",
      "end_line": 12,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 4,
      "start_line": 12
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "fun regularFunction(param: String): String {\n    return \"Hello $param\"\n}",
      "end_line": 18,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 0,
      "start_line": 16
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "val anonymousFunc = fun(x: Int): Int { return x * 2 }",
      "end_line": 21,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 20,
      "start_line": 21
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "class RegularClass(private val name: String) {\n    fun method(): String = name\n}",
      "end_line": 26,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 24
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    fun method(): String = name",
      "end_line": 25,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 4,
      "start_line": 25
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "data class DataClass(val id: Int, val name: String)",
      "end_line": 29,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 29
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "enum class Color {\n    RED,\n    GREEN,\n    BLUE\n}",
      "end_line": 36,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 32
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "object SingletonObject {\n    const val CONSTANT = \"constant_value\"\n\n    fun objectMethod(): String = \"object method\"\n}",
      "end_line": 43,
      "language": "kotlin",
      "name": "object",
      "original_indentation": 0,
      "start_line": 39
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "    const val CONSTANT = \"constant_value\"",
      "end_line": 40,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 4,
      "start_line": 40
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    fun objectMethod(): String = \"object method\"",
      "end_line": 42,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 4,
      "start_line": 42
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "class ClassWithCompanion {\n    companion object {\n        const val COMPANION_CONSTANT = \"companion_constant\"\n\n        fun companionMethod(): String = \"companion method\"\n    }\n}",
      "end_line": 52,
      "language": "kotlin",
      "name": "class",
      "original_indentation": 0,
      "start_line": 46
    },
    {
      "chunk_type": "Lambda",
      "comment_ranges": [],
      "content": "    companion object {\n        const val COMPANION_CONSTANT = \"companion_constant\"\n\n        fun companionMethod(): String = \"companion method\"\n    }",
      "end_line": 51,
      "language": "kotlin",
      "name": "lambda",
      "original_indentation": 21,
      "start_line": 47
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "        const val COMPANION_CONSTANT = \"companion_constant\"",
      "end_line": 48,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 8,
      "start_line": 48
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "        fun companionMethod(): String = \"companion method\"",
      "end_line": 50,
      "language": "kotlin",
      "name": "function",
      "original_indentation": 8,
      "start_line": 50
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "val globalVal: String = \"global val\"",
      "end_line": 55,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 0,
      "start_line": 55
    },
    {
      "chunk_type": "CodeBlock",
      "comment_ranges": [],
      "content": "var globalVar: String = \"global var\"",
      "end_line": 56,
      "language": "kotlin",
      "name": "property",
      "original_indentation": 0,
      "start_line": 56
    }
  ],
  "source_code": "\n// Line comment\n/* Block comment */\n\npackage com.example.test\n\n// Type alias\ntypealias StringList = List<String>\n\n// Interface declaration\ninterface TestInterface {\n    fun interfaceMethod(): String\n}\n\n// Regular function\nfun regularFunction(param: String): String {\n    return \"Hello $param\"\n}\n\n// Anonymous function\nval anonymousFunc = fun(x: Int): Int { return x * 2 }\n\n// Regular class\nclass RegularClass(private val name: String) {\n    fun method(): String = name\n}\n\n// Data class\ndata class DataClass(val id: Int, val name: String)\n\n// Enum class\nenum class Color {\n    RED,\n    GREEN,\n    BLUE\n}\n\n// Object declaration\nobject SingletonObject {\n    const val CONSTANT = \"constant_value\"\n\n    fun objectMethod(): String = \"object method\"\n}\n\n// Class with companion object\nclass ClassWithCompanion {\n    companion object {\n        const val COMPANION_CONSTANT = \"companion_constant\"\n\n        fun companionMethod(): String = \"companion method\"\n    }\n}\n\n// Properties\nval globalVal: String = \"global val\"\nvar globalVar: String = \"global var\"\n",
  "test_name": "test_kotlin_comprehensive_extraction",
  "total_chunks": 19
}
