---
source: tests/integration/languages/extractor.rs
expression: "serde_json::to_string_pretty(&snapshot_data).unwrap()"
---
{
  "chunks": [
    {
      "chunk_type": "File",
      "comment_ranges": [
        [
          1,
          22
        ],
        [
          73,
          92
        ],
        [
          145,
          165
        ],
        [
          231,
          244
        ],
        [
          269,
          311
        ]
      ],
      "content": "\n// Enum with variants\npub enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n\n// Trait definition\npub trait Display {\n    fn fmt(&self) -> String;\n}\n\n// Module definition\npub mod utils {\n    pub fn helper() -> i32 {\n        42\n    }\n}\n\n// Type alias\npub type UserId = u64;\n\n// Existing constructs (should still work)\npub struct User {\n    id: UserId,\n    name: String,\n}\n\nimpl Display for User {\n    fn fmt(&self) -> String {\n        format!(\"User({})\", self.name)\n    }\n}\n\npub fn create_user(name: String) -> User {\n    User {\n        id: 1,\n        name,\n    }\n}\n",
      "end_line": 40,
      "language": "rust",
      "name": "entire_file",
      "original_indentation": 0,
      "start_line": 1
    },
    {
      "chunk_type": "Enum",
      "comment_ranges": [],
      "content": "pub enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}",
      "end_line": 6,
      "language": "rust",
      "name": "Result",
      "original_indentation": 0,
      "start_line": 3
    },
    {
      "chunk_type": "Trait",
      "comment_ranges": [],
      "content": "pub trait Display {\n    fn fmt(&self) -> String;\n}",
      "end_line": 11,
      "language": "rust",
      "name": "Display",
      "original_indentation": 0,
      "start_line": 9
    },
    {
      "chunk_type": "Module",
      "comment_ranges": [],
      "content": "pub mod utils {\n    pub fn helper() -> i32 {\n        42\n    }\n}",
      "end_line": 18,
      "language": "rust",
      "name": "utils",
      "original_indentation": 0,
      "start_line": 14
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    pub fn helper() -> i32 {\n        42\n    }",
      "end_line": 17,
      "language": "rust",
      "name": "helper",
      "original_indentation": 4,
      "start_line": 15
    },
    {
      "chunk_type": "TypeAlias",
      "comment_ranges": [],
      "content": "pub type UserId = u64;",
      "end_line": 21,
      "language": "rust",
      "name": "UserId",
      "original_indentation": 0,
      "start_line": 21
    },
    {
      "chunk_type": "Struct",
      "comment_ranges": [],
      "content": "pub struct User {\n    id: UserId,\n    name: String,\n}",
      "end_line": 27,
      "language": "rust",
      "name": "User",
      "original_indentation": 0,
      "start_line": 24
    },
    {
      "chunk_type": "Class",
      "comment_ranges": [],
      "content": "impl Display for User {\n    fn fmt(&self) -> String {\n        format!(\"User({})\", self.name)\n    }\n}",
      "end_line": 33,
      "language": "rust",
      "name": "Display",
      "original_indentation": 0,
      "start_line": 29
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "    fn fmt(&self) -> String {\n        format!(\"User({})\", self.name)\n    }",
      "end_line": 32,
      "language": "rust",
      "name": "fmt",
      "original_indentation": 4,
      "start_line": 30
    },
    {
      "chunk_type": "Function",
      "comment_ranges": [],
      "content": "pub fn create_user(name: String) -> User {\n    User {\n        id: 1,\n        name,\n    }\n}",
      "end_line": 40,
      "language": "rust",
      "name": "create_user",
      "original_indentation": 0,
      "start_line": 35
    }
  ],
  "source_code": "\n// Enum with variants\npub enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n\n// Trait definition\npub trait Display {\n    fn fmt(&self) -> String;\n}\n\n// Module definition\npub mod utils {\n    pub fn helper() -> i32 {\n        42\n    }\n}\n\n// Type alias\npub type UserId = u64;\n\n// Existing constructs (should still work)\npub struct User {\n    id: UserId,\n    name: String,\n}\n\nimpl Display for User {\n    fn fmt(&self) -> String {\n        format!(\"User({})\", self.name)\n    }\n}\n\npub fn create_user(name: String) -> User {\n    User {\n        id: 1,\n        name,\n    }\n}\n",
  "test_name": "test_rust_all_constructs_combined",
  "total_chunks": 10
}
